//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace SqlParserAntlr
{
    // Generated from C:/Projects/SqlParserAntlr/SqlParserAntlr/JsParser\JavaScriptParser.g4 by ANTLR 4.7

    // Unreachable code detected
#pragma warning disable 0162
    // The variable '...' is assigned but its value is never used
#pragma warning disable 0219
    // Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
    // Ambiguous reference in cref attribute
#pragma warning disable 419

    using System;
    using System.IO;
    using System.Text;
    using System.Diagnostics;
    using System.Collections.Generic;
    using Antlr4.Runtime;
    using Antlr4.Runtime.Atn;
    using Antlr4.Runtime.Misc;
    using Antlr4.Runtime.Tree;
    using DFA = Antlr4.Runtime.Dfa.DFA;

    [System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
    [System.CLSCompliant(false)]
    public partial class JavaScriptParser : JavaScriptBaseParser
    {
        protected static DFA[] decisionToDFA;
        protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
        public const int
            MultiLineComment = 1, SingleLineComment = 2, RegularExpressionLiteral = 3, OpenBracket = 4,
            CloseBracket = 5, OpenParen = 6, CloseParen = 7, OpenBrace = 8, CloseBrace = 9,
            SemiColon = 10, Comma = 11, Assign = 12, QuestionMark = 13, Colon = 14, Ellipsis = 15,
            Dot = 16, PlusPlus = 17, MinusMinus = 18, Plus = 19, Minus = 20, BitNot = 21, Not = 22,
            Multiply = 23, Divide = 24, Modulus = 25, RightShiftArithmetic = 26, LeftShiftArithmetic = 27,
            RightShiftLogical = 28, LessThan = 29, MoreThan = 30, LessThanEquals = 31, GreaterThanEquals = 32,
            Equals_ = 33, NotEquals = 34, IdentityEquals = 35, IdentityNotEquals = 36, BitAnd = 37,
            BitXOr = 38, BitOr = 39, And = 40, Or = 41, MultiplyAssign = 42, DivideAssign = 43,
            ModulusAssign = 44, PlusAssign = 45, MinusAssign = 46, LeftShiftArithmeticAssign = 47,
            RightShiftArithmeticAssign = 48, RightShiftLogicalAssign = 49, BitAndAssign = 50,
            BitXorAssign = 51, BitOrAssign = 52, ARROW = 53, NullLiteral = 54, BooleanLiteral = 55,
            DecimalLiteral = 56, HexIntegerLiteral = 57, OctalIntegerLiteral = 58, OctalIntegerLiteral2 = 59,
            BinaryIntegerLiteral = 60, Break = 61, Do = 62, Instanceof = 63, Typeof = 64, Case = 65,
            Else = 66, New = 67, Var = 68, Catch = 69, Finally = 70, Return = 71, Void = 72, Continue = 73,
            For = 74, Switch = 75, While = 76, Debugger = 77, Function = 78, This = 79, With = 80,
            Default = 81, If = 82, Throw = 83, Delete = 84, In = 85, Try = 86, Class = 87, Enum = 88,
            Extends = 89, Super = 90, Const = 91, Export = 92, Import = 93, Implements = 94, Let = 95,
            Private = 96, Public = 97, Interface = 98, Package = 99, Protected = 100, Static = 101,
            Yield = 102, Identifier = 103, StringLiteral = 104, TemplateStringLiteral = 105,
            WhiteSpaces = 106, LineTerminator = 107, HtmlComment = 108, CDataComment = 109,
            UnexpectedCharacter = 110;
        public const int
            RULE_program = 0, RULE_sourceElement = 1, RULE_statement = 2, RULE_block = 3,
            RULE_statementList = 4, RULE_variableStatement = 5, RULE_variableDeclarationList = 6,
            RULE_variableDeclaration = 7, RULE_emptyStatement = 8, RULE_expressionStatement = 9,
            RULE_ifStatement = 10, RULE_iterationStatement = 11, RULE_varModifier = 12,
            RULE_continueStatement = 13, RULE_breakStatement = 14, RULE_returnStatement = 15,
            RULE_withStatement = 16, RULE_switchStatement = 17, RULE_caseBlock = 18,
            RULE_caseClauses = 19, RULE_caseClause = 20, RULE_defaultClause = 21,
            RULE_labelledStatement = 22, RULE_throwStatement = 23, RULE_tryStatement = 24,
            RULE_catchProduction = 25, RULE_finallyProduction = 26, RULE_debuggerStatement = 27,
            RULE_functionDeclaration = 28, RULE_classDeclaration = 29, RULE_classTail = 30,
            RULE_classElement = 31, RULE_methodDefinition = 32, RULE_generatorMethod = 33,
            RULE_formalParameterList = 34, RULE_formalParameterArg = 35, RULE_lastFormalParameterArg = 36,
            RULE_functionBody = 37, RULE_sourceElements = 38, RULE_arrayLiteral = 39,
            RULE_elementList = 40, RULE_lastElement = 41, RULE_objectLiteral = 42,
            RULE_propertyAssignment = 43, RULE_propertyName = 44, RULE_arguments = 45,
            RULE_lastArgument = 46, RULE_expressionSequence = 47, RULE_singleExpression = 48,
            RULE_arrowFunctionParameters = 49, RULE_arrowFunctionBody = 50, RULE_assignmentOperator = 51,
            RULE_literal = 52, RULE_numericLiteral = 53, RULE_identifierName = 54,
            RULE_reservedWord = 55, RULE_keyword = 56, RULE_getter = 57, RULE_setter = 58,
            RULE_eos = 59;
        public static readonly string[] ruleNames = {
        "program", "sourceElement", "statement", "block", "statementList", "variableStatement",
        "variableDeclarationList", "variableDeclaration", "emptyStatement", "expressionStatement",
        "ifStatement", "iterationStatement", "varModifier", "continueStatement",
        "breakStatement", "returnStatement", "withStatement", "switchStatement",
        "caseBlock", "caseClauses", "caseClause", "defaultClause", "labelledStatement",
        "throwStatement", "tryStatement", "catchProduction", "finallyProduction",
        "debuggerStatement", "functionDeclaration", "classDeclaration", "classTail",
        "classElement", "methodDefinition", "generatorMethod", "formalParameterList",
        "formalParameterArg", "lastFormalParameterArg", "functionBody", "sourceElements",
        "arrayLiteral", "elementList", "lastElement", "objectLiteral", "propertyAssignment",
        "propertyName", "arguments", "lastArgument", "expressionSequence", "singleExpression",
        "arrowFunctionParameters", "arrowFunctionBody", "assignmentOperator",
        "literal", "numericLiteral", "identifierName", "reservedWord", "keyword",
        "getter", "setter", "eos"
    };

        private static readonly string[] _LiteralNames = {
        null, null, null, null, "'['", "']'", "'('", "')'", "'{'", "'}'", "';'",
        "','", "'='", "'?'", "':'", "'...'", "'.'", "'++'", "'--'", "'+'", "'-'",
        "'~'", "'!'", "'*'", "'/'", "'%'", "'>>'", "'<<'", "'>>>'", "'<'", "'>'",
        "'<='", "'>='", "'=='", "'!='", "'==='", "'!=='", "'&'", "'^'", "'|'",
        "'&&'", "'||'", "'*='", "'/='", "'%='", "'+='", "'-='", "'<<='", "'>>='",
        "'>>>='", "'&='", "'^='", "'|='", "'=>'", "'null'", null, null, null,
        null, null, null, "'break'", "'do'", "'instanceof'", "'typeof'", "'case'",
        "'else'", "'new'", "'var'", "'catch'", "'finally'", "'return'", "'void'",
        "'continue'", "'for'", "'switch'", "'while'", "'debugger'", "'function'",
        "'this'", "'with'", "'default'", "'if'", "'throw'", "'delete'", "'in'",
        "'try'", "'class'", "'enum'", "'extends'", "'super'", "'const'", "'export'",
        "'import'", "'implements'", "'let'", "'private'", "'public'", "'interface'",
        "'package'", "'protected'", "'static'", "'yield'"
    };
        private static readonly string[] _SymbolicNames = {
        null, "MultiLineComment", "SingleLineComment", "RegularExpressionLiteral",
        "OpenBracket", "CloseBracket", "OpenParen", "CloseParen", "OpenBrace",
        "CloseBrace", "SemiColon", "Comma", "Assign", "QuestionMark", "Colon",
        "Ellipsis", "Dot", "PlusPlus", "MinusMinus", "Plus", "Minus", "BitNot",
        "Not", "Multiply", "Divide", "Modulus", "RightShiftArithmetic", "LeftShiftArithmetic",
        "RightShiftLogical", "LessThan", "MoreThan", "LessThanEquals", "GreaterThanEquals",
        "Equals_", "NotEquals", "IdentityEquals", "IdentityNotEquals", "BitAnd",
        "BitXOr", "BitOr", "And", "Or", "MultiplyAssign", "DivideAssign", "ModulusAssign",
        "PlusAssign", "MinusAssign", "LeftShiftArithmeticAssign", "RightShiftArithmeticAssign",
        "RightShiftLogicalAssign", "BitAndAssign", "BitXorAssign", "BitOrAssign",
        "ARROW", "NullLiteral", "BooleanLiteral", "DecimalLiteral", "HexIntegerLiteral",
        "OctalIntegerLiteral", "OctalIntegerLiteral2", "BinaryIntegerLiteral",
        "Break", "Do", "Instanceof", "Typeof", "Case", "Else", "New", "Var", "Catch",
        "Finally", "Return", "Void", "Continue", "For", "Switch", "While", "Debugger",
        "Function", "This", "With", "Default", "If", "Throw", "Delete", "In",
        "Try", "Class", "Enum", "Extends", "Super", "Const", "Export", "Import",
        "Implements", "Let", "Private", "Public", "Interface", "Package", "Protected",
        "Static", "Yield", "Identifier", "StringLiteral", "TemplateStringLiteral",
        "WhiteSpaces", "LineTerminator", "HtmlComment", "CDataComment", "UnexpectedCharacter"
    };
        public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

        [NotNull]
        public override IVocabulary Vocabulary
        {
            get
            {
                return DefaultVocabulary;
            }
        }

        public override string GrammarFileName { get { return "JavaScriptParser.g4"; } }

        public override string[] RuleNames { get { return ruleNames; } }

        public override string SerializedAtn { get { return new string(_serializedATN); } }

        static JavaScriptParser()
        {
            decisionToDFA = new DFA[_ATN.NumberOfDecisions];
            for (int i = 0; i < _ATN.NumberOfDecisions; i++)
            {
                decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
            }
        }

        public JavaScriptParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

        public JavaScriptParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
        : base(input)
        {
            Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
        }
        public partial class ProgramContext : ParserRuleContext
        {
            public ITerminalNode Eof() { return GetToken(JavaScriptParser.Eof, 0); }
            public SourceElementsContext sourceElements()
            {
                return GetRuleContext<SourceElementsContext>(0);
            }
            public ProgramContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_program; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterProgram(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitProgram(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitProgram(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ProgramContext program()
        {
            ProgramContext _localctx = new ProgramContext(Context, State);
            EnterRule(_localctx, 0, RULE_program);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 121;
                    ErrorHandler.Sync(this);
                    switch (Interpreter.AdaptivePredict(TokenStream, 0, Context))
                    {
                        case 1:
                            {
                                State = 120; sourceElements();
                            }
                            break;
                    }
                    State = 123; Match(Eof);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class SourceElementContext : ParserRuleContext
        {
            public StatementContext statement()
            {
                return GetRuleContext<StatementContext>(0);
            }
            public ITerminalNode Export() { return GetToken(JavaScriptParser.Export, 0); }
            public SourceElementContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_sourceElement; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterSourceElement(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitSourceElement(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitSourceElement(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public SourceElementContext sourceElement()
        {
            SourceElementContext _localctx = new SourceElementContext(Context, State);
            EnterRule(_localctx, 2, RULE_sourceElement);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 126;
                    ErrorHandler.Sync(this);
                    switch (Interpreter.AdaptivePredict(TokenStream, 1, Context))
                    {
                        case 1:
                            {
                                State = 125; Match(Export);
                            }
                            break;
                    }
                    State = 128; statement();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class StatementContext : ParserRuleContext
        {
            public BlockContext block()
            {
                return GetRuleContext<BlockContext>(0);
            }
            public VariableStatementContext variableStatement()
            {
                return GetRuleContext<VariableStatementContext>(0);
            }
            public EmptyStatementContext emptyStatement()
            {
                return GetRuleContext<EmptyStatementContext>(0);
            }
            public ExpressionStatementContext expressionStatement()
            {
                return GetRuleContext<ExpressionStatementContext>(0);
            }
            public IfStatementContext ifStatement()
            {
                return GetRuleContext<IfStatementContext>(0);
            }
            public IterationStatementContext iterationStatement()
            {
                return GetRuleContext<IterationStatementContext>(0);
            }
            public ContinueStatementContext continueStatement()
            {
                return GetRuleContext<ContinueStatementContext>(0);
            }
            public BreakStatementContext breakStatement()
            {
                return GetRuleContext<BreakStatementContext>(0);
            }
            public ReturnStatementContext returnStatement()
            {
                return GetRuleContext<ReturnStatementContext>(0);
            }
            public WithStatementContext withStatement()
            {
                return GetRuleContext<WithStatementContext>(0);
            }
            public LabelledStatementContext labelledStatement()
            {
                return GetRuleContext<LabelledStatementContext>(0);
            }
            public SwitchStatementContext switchStatement()
            {
                return GetRuleContext<SwitchStatementContext>(0);
            }
            public ThrowStatementContext throwStatement()
            {
                return GetRuleContext<ThrowStatementContext>(0);
            }
            public TryStatementContext tryStatement()
            {
                return GetRuleContext<TryStatementContext>(0);
            }
            public DebuggerStatementContext debuggerStatement()
            {
                return GetRuleContext<DebuggerStatementContext>(0);
            }
            public FunctionDeclarationContext functionDeclaration()
            {
                return GetRuleContext<FunctionDeclarationContext>(0);
            }
            public ClassDeclarationContext classDeclaration()
            {
                return GetRuleContext<ClassDeclarationContext>(0);
            }
            public StatementContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_statement; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterStatement(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitStatement(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitStatement(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public StatementContext statement()
        {
            StatementContext _localctx = new StatementContext(Context, State);
            EnterRule(_localctx, 4, RULE_statement);
            try
            {
                State = 147;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 2, Context))
                {
                    case 1:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 130; block();
                        }
                        break;
                    case 2:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 131; variableStatement();
                        }
                        break;
                    case 3:
                        EnterOuterAlt(_localctx, 3);
                        {
                            State = 132; emptyStatement();
                        }
                        break;
                    case 4:
                        EnterOuterAlt(_localctx, 4);
                        {
                            State = 133; expressionStatement();
                        }
                        break;
                    case 5:
                        EnterOuterAlt(_localctx, 5);
                        {
                            State = 134; ifStatement();
                        }
                        break;
                    case 6:
                        EnterOuterAlt(_localctx, 6);
                        {
                            State = 135; iterationStatement();
                        }
                        break;
                    case 7:
                        EnterOuterAlt(_localctx, 7);
                        {
                            State = 136; continueStatement();
                        }
                        break;
                    case 8:
                        EnterOuterAlt(_localctx, 8);
                        {
                            State = 137; breakStatement();
                        }
                        break;
                    case 9:
                        EnterOuterAlt(_localctx, 9);
                        {
                            State = 138; returnStatement();
                        }
                        break;
                    case 10:
                        EnterOuterAlt(_localctx, 10);
                        {
                            State = 139; withStatement();
                        }
                        break;
                    case 11:
                        EnterOuterAlt(_localctx, 11);
                        {
                            State = 140; labelledStatement();
                        }
                        break;
                    case 12:
                        EnterOuterAlt(_localctx, 12);
                        {
                            State = 141; switchStatement();
                        }
                        break;
                    case 13:
                        EnterOuterAlt(_localctx, 13);
                        {
                            State = 142; throwStatement();
                        }
                        break;
                    case 14:
                        EnterOuterAlt(_localctx, 14);
                        {
                            State = 143; tryStatement();
                        }
                        break;
                    case 15:
                        EnterOuterAlt(_localctx, 15);
                        {
                            State = 144; debuggerStatement();
                        }
                        break;
                    case 16:
                        EnterOuterAlt(_localctx, 16);
                        {
                            State = 145; functionDeclaration();
                        }
                        break;
                    case 17:
                        EnterOuterAlt(_localctx, 17);
                        {
                            State = 146; classDeclaration();
                        }
                        break;
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class BlockContext : ParserRuleContext
        {
            public StatementListContext statementList()
            {
                return GetRuleContext<StatementListContext>(0);
            }
            public BlockContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_block; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterBlock(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitBlock(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitBlock(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public BlockContext block()
        {
            BlockContext _localctx = new BlockContext(Context, State);
            EnterRule(_localctx, 6, RULE_block);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 149; Match(OpenBrace);
                    State = 151;
                    ErrorHandler.Sync(this);
                    switch (Interpreter.AdaptivePredict(TokenStream, 3, Context))
                    {
                        case 1:
                            {
                                State = 150; statementList();
                            }
                            break;
                    }
                    State = 153; Match(CloseBrace);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class StatementListContext : ParserRuleContext
        {
            public StatementContext[] statement()
            {
                return GetRuleContexts<StatementContext>();
            }
            public StatementContext statement(int i)
            {
                return GetRuleContext<StatementContext>(i);
            }
            public StatementListContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_statementList; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterStatementList(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitStatementList(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public StatementListContext statementList()
        {
            StatementListContext _localctx = new StatementListContext(Context, State);
            EnterRule(_localctx, 8, RULE_statementList);
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 156;
                    ErrorHandler.Sync(this);
                    _alt = 1;
                    do
                    {
                        switch (_alt)
                        {
                            case 1:
                                {
                                    {
                                        State = 155; statement();
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        State = 158;
                        ErrorHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(TokenStream, 4, Context);
                    } while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class VariableStatementContext : ParserRuleContext
        {
            public VarModifierContext varModifier()
            {
                return GetRuleContext<VarModifierContext>(0);
            }
            public VariableDeclarationListContext variableDeclarationList()
            {
                return GetRuleContext<VariableDeclarationListContext>(0);
            }
            public EosContext eos()
            {
                return GetRuleContext<EosContext>(0);
            }
            public VariableStatementContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_variableStatement; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterVariableStatement(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitVariableStatement(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVariableStatement(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public VariableStatementContext variableStatement()
        {
            VariableStatementContext _localctx = new VariableStatementContext(Context, State);
            EnterRule(_localctx, 10, RULE_variableStatement);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 160; varModifier();
                    State = 161; variableDeclarationList();
                    State = 162; eos();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class VariableDeclarationListContext : ParserRuleContext
        {
            public VariableDeclarationContext[] variableDeclaration()
            {
                return GetRuleContexts<VariableDeclarationContext>();
            }
            public VariableDeclarationContext variableDeclaration(int i)
            {
                return GetRuleContext<VariableDeclarationContext>(i);
            }
            public VariableDeclarationListContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_variableDeclarationList; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterVariableDeclarationList(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitVariableDeclarationList(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationList(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public VariableDeclarationListContext variableDeclarationList()
        {
            VariableDeclarationListContext _localctx = new VariableDeclarationListContext(Context, State);
            EnterRule(_localctx, 12, RULE_variableDeclarationList);
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 164; variableDeclaration();
                    State = 169;
                    ErrorHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(TokenStream, 5, Context);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 165; Match(Comma);
                                    State = 166; variableDeclaration();
                                }
                            }
                        }
                        State = 171;
                        ErrorHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(TokenStream, 5, Context);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class VariableDeclarationContext : ParserRuleContext
        {
            public ITerminalNode Identifier() { return GetToken(JavaScriptParser.Identifier, 0); }
            public ArrayLiteralContext arrayLiteral()
            {
                return GetRuleContext<ArrayLiteralContext>(0);
            }
            public ObjectLiteralContext objectLiteral()
            {
                return GetRuleContext<ObjectLiteralContext>(0);
            }
            public SingleExpressionContext singleExpression()
            {
                return GetRuleContext<SingleExpressionContext>(0);
            }
            public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_variableDeclaration; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterVariableDeclaration(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitVariableDeclaration(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public VariableDeclarationContext variableDeclaration()
        {
            VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
            EnterRule(_localctx, 14, RULE_variableDeclaration);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 175;
                    ErrorHandler.Sync(this);
                    switch (TokenStream.LA(1))
                    {
                        case Identifier:
                            {
                                State = 172; Match(Identifier);
                            }
                            break;
                        case OpenBracket:
                            {
                                State = 173; arrayLiteral();
                            }
                            break;
                        case OpenBrace:
                            {
                                State = 174; objectLiteral();
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    State = 179;
                    ErrorHandler.Sync(this);
                    switch (Interpreter.AdaptivePredict(TokenStream, 7, Context))
                    {
                        case 1:
                            {
                                State = 177; Match(Assign);
                                State = 178; singleExpression(0);
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class EmptyStatementContext : ParserRuleContext
        {
            public ITerminalNode SemiColon() { return GetToken(JavaScriptParser.SemiColon, 0); }
            public EmptyStatementContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_emptyStatement; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterEmptyStatement(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitEmptyStatement(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitEmptyStatement(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public EmptyStatementContext emptyStatement()
        {
            EmptyStatementContext _localctx = new EmptyStatementContext(Context, State);
            EnterRule(_localctx, 16, RULE_emptyStatement);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 181; Match(SemiColon);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ExpressionStatementContext : ParserRuleContext
        {
            public ExpressionSequenceContext expressionSequence()
            {
                return GetRuleContext<ExpressionSequenceContext>(0);
            }
            public EosContext eos()
            {
                return GetRuleContext<EosContext>(0);
            }
            public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_expressionStatement; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterExpressionStatement(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitExpressionStatement(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ExpressionStatementContext expressionStatement()
        {
            ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
            EnterRule(_localctx, 18, RULE_expressionStatement);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 183;
                    if (!(notOpenBraceAndNotFunction())) throw new FailedPredicateException(this, "notOpenBraceAndNotFunction()");
                    State = 184; expressionSequence();
                    State = 185; eos();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class IfStatementContext : ParserRuleContext
        {
            public ITerminalNode If() { return GetToken(JavaScriptParser.If, 0); }
            public ExpressionSequenceContext expressionSequence()
            {
                return GetRuleContext<ExpressionSequenceContext>(0);
            }
            public StatementContext[] statement()
            {
                return GetRuleContexts<StatementContext>();
            }
            public StatementContext statement(int i)
            {
                return GetRuleContext<StatementContext>(i);
            }
            public ITerminalNode Else() { return GetToken(JavaScriptParser.Else, 0); }
            public IfStatementContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_ifStatement; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterIfStatement(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitIfStatement(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public IfStatementContext ifStatement()
        {
            IfStatementContext _localctx = new IfStatementContext(Context, State);
            EnterRule(_localctx, 20, RULE_ifStatement);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 187; Match(If);
                    State = 188; Match(OpenParen);
                    State = 189; expressionSequence();
                    State = 190; Match(CloseParen);
                    State = 191; statement();
                    State = 194;
                    ErrorHandler.Sync(this);
                    switch (Interpreter.AdaptivePredict(TokenStream, 8, Context))
                    {
                        case 1:
                            {
                                State = 192; Match(Else);
                                State = 193; statement();
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class IterationStatementContext : ParserRuleContext
        {
            public IterationStatementContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_iterationStatement; } }

            public IterationStatementContext() { }
            public virtual void CopyFrom(IterationStatementContext context)
            {
                base.CopyFrom(context);
            }
        }
        public partial class DoStatementContext : IterationStatementContext
        {
            public ITerminalNode Do() { return GetToken(JavaScriptParser.Do, 0); }
            public StatementContext statement()
            {
                return GetRuleContext<StatementContext>(0);
            }
            public ITerminalNode While() { return GetToken(JavaScriptParser.While, 0); }
            public ExpressionSequenceContext expressionSequence()
            {
                return GetRuleContext<ExpressionSequenceContext>(0);
            }
            public EosContext eos()
            {
                return GetRuleContext<EosContext>(0);
            }
            public DoStatementContext(IterationStatementContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterDoStatement(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitDoStatement(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitDoStatement(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class ForVarStatementContext : IterationStatementContext
        {
            public ITerminalNode For() { return GetToken(JavaScriptParser.For, 0); }
            public VarModifierContext varModifier()
            {
                return GetRuleContext<VarModifierContext>(0);
            }
            public VariableDeclarationListContext variableDeclarationList()
            {
                return GetRuleContext<VariableDeclarationListContext>(0);
            }
            public StatementContext statement()
            {
                return GetRuleContext<StatementContext>(0);
            }
            public ExpressionSequenceContext[] expressionSequence()
            {
                return GetRuleContexts<ExpressionSequenceContext>();
            }
            public ExpressionSequenceContext expressionSequence(int i)
            {
                return GetRuleContext<ExpressionSequenceContext>(i);
            }
            public ForVarStatementContext(IterationStatementContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterForVarStatement(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitForVarStatement(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitForVarStatement(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class ForVarInStatementContext : IterationStatementContext
        {
            public ITerminalNode For() { return GetToken(JavaScriptParser.For, 0); }
            public VarModifierContext varModifier()
            {
                return GetRuleContext<VarModifierContext>(0);
            }
            public VariableDeclarationContext variableDeclaration()
            {
                return GetRuleContext<VariableDeclarationContext>(0);
            }
            public ExpressionSequenceContext expressionSequence()
            {
                return GetRuleContext<ExpressionSequenceContext>(0);
            }
            public StatementContext statement()
            {
                return GetRuleContext<StatementContext>(0);
            }
            public ITerminalNode In() { return GetToken(JavaScriptParser.In, 0); }
            public ITerminalNode Identifier() { return GetToken(JavaScriptParser.Identifier, 0); }
            public ForVarInStatementContext(IterationStatementContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterForVarInStatement(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitForVarInStatement(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitForVarInStatement(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class WhileStatementContext : IterationStatementContext
        {
            public ITerminalNode While() { return GetToken(JavaScriptParser.While, 0); }
            public ExpressionSequenceContext expressionSequence()
            {
                return GetRuleContext<ExpressionSequenceContext>(0);
            }
            public StatementContext statement()
            {
                return GetRuleContext<StatementContext>(0);
            }
            public WhileStatementContext(IterationStatementContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterWhileStatement(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitWhileStatement(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class ForStatementContext : IterationStatementContext
        {
            public ITerminalNode For() { return GetToken(JavaScriptParser.For, 0); }
            public StatementContext statement()
            {
                return GetRuleContext<StatementContext>(0);
            }
            public ExpressionSequenceContext[] expressionSequence()
            {
                return GetRuleContexts<ExpressionSequenceContext>();
            }
            public ExpressionSequenceContext expressionSequence(int i)
            {
                return GetRuleContext<ExpressionSequenceContext>(i);
            }
            public ForStatementContext(IterationStatementContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterForStatement(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitForStatement(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class ForInStatementContext : IterationStatementContext
        {
            public ITerminalNode For() { return GetToken(JavaScriptParser.For, 0); }
            public SingleExpressionContext singleExpression()
            {
                return GetRuleContext<SingleExpressionContext>(0);
            }
            public ExpressionSequenceContext expressionSequence()
            {
                return GetRuleContext<ExpressionSequenceContext>(0);
            }
            public StatementContext statement()
            {
                return GetRuleContext<StatementContext>(0);
            }
            public ITerminalNode In() { return GetToken(JavaScriptParser.In, 0); }
            public ITerminalNode Identifier() { return GetToken(JavaScriptParser.Identifier, 0); }
            public ForInStatementContext(IterationStatementContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterForInStatement(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitForInStatement(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitForInStatement(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public IterationStatementContext iterationStatement()
        {
            IterationStatementContext _localctx = new IterationStatementContext(Context, State);
            EnterRule(_localctx, 22, RULE_iterationStatement);
            int _la;
            try
            {
                State = 265;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 16, Context))
                {
                    case 1:
                        _localctx = new DoStatementContext(_localctx);
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 196; Match(Do);
                            State = 197; statement();
                            State = 198; Match(While);
                            State = 199; Match(OpenParen);
                            State = 200; expressionSequence();
                            State = 201; Match(CloseParen);
                            State = 202; eos();
                        }
                        break;
                    case 2:
                        _localctx = new WhileStatementContext(_localctx);
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 204; Match(While);
                            State = 205; Match(OpenParen);
                            State = 206; expressionSequence();
                            State = 207; Match(CloseParen);
                            State = 208; statement();
                        }
                        break;
                    case 3:
                        _localctx = new ForStatementContext(_localctx);
                        EnterOuterAlt(_localctx, 3);
                        {
                            State = 210; Match(For);
                            State = 211; Match(OpenParen);
                            State = 213;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                            if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RegularExpressionLiteral) | (1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << PlusPlus) | (1L << MinusMinus) | (1L << Plus) | (1L << Minus) | (1L << BitNot) | (1L << Not) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral) | (1L << HexIntegerLiteral) | (1L << OctalIntegerLiteral) | (1L << OctalIntegerLiteral2) | (1L << BinaryIntegerLiteral))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Typeof - 64)) | (1L << (New - 64)) | (1L << (Void - 64)) | (1L << (Function - 64)) | (1L << (This - 64)) | (1L << (Delete - 64)) | (1L << (Class - 64)) | (1L << (Super - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteral - 64)) | (1L << (TemplateStringLiteral - 64)))) != 0))
                            {
                                {
                                    State = 212; expressionSequence();
                                }
                            }

                            State = 215; Match(SemiColon);
                            State = 217;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                            if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RegularExpressionLiteral) | (1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << PlusPlus) | (1L << MinusMinus) | (1L << Plus) | (1L << Minus) | (1L << BitNot) | (1L << Not) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral) | (1L << HexIntegerLiteral) | (1L << OctalIntegerLiteral) | (1L << OctalIntegerLiteral2) | (1L << BinaryIntegerLiteral))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Typeof - 64)) | (1L << (New - 64)) | (1L << (Void - 64)) | (1L << (Function - 64)) | (1L << (This - 64)) | (1L << (Delete - 64)) | (1L << (Class - 64)) | (1L << (Super - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteral - 64)) | (1L << (TemplateStringLiteral - 64)))) != 0))
                            {
                                {
                                    State = 216; expressionSequence();
                                }
                            }

                            State = 219; Match(SemiColon);
                            State = 221;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                            if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RegularExpressionLiteral) | (1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << PlusPlus) | (1L << MinusMinus) | (1L << Plus) | (1L << Minus) | (1L << BitNot) | (1L << Not) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral) | (1L << HexIntegerLiteral) | (1L << OctalIntegerLiteral) | (1L << OctalIntegerLiteral2) | (1L << BinaryIntegerLiteral))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Typeof - 64)) | (1L << (New - 64)) | (1L << (Void - 64)) | (1L << (Function - 64)) | (1L << (This - 64)) | (1L << (Delete - 64)) | (1L << (Class - 64)) | (1L << (Super - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteral - 64)) | (1L << (TemplateStringLiteral - 64)))) != 0))
                            {
                                {
                                    State = 220; expressionSequence();
                                }
                            }

                            State = 223; Match(CloseParen);
                            State = 224; statement();
                        }
                        break;
                    case 4:
                        _localctx = new ForVarStatementContext(_localctx);
                        EnterOuterAlt(_localctx, 4);
                        {
                            State = 225; Match(For);
                            State = 226; Match(OpenParen);
                            State = 227; varModifier();
                            State = 228; variableDeclarationList();
                            State = 229; Match(SemiColon);
                            State = 231;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                            if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RegularExpressionLiteral) | (1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << PlusPlus) | (1L << MinusMinus) | (1L << Plus) | (1L << Minus) | (1L << BitNot) | (1L << Not) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral) | (1L << HexIntegerLiteral) | (1L << OctalIntegerLiteral) | (1L << OctalIntegerLiteral2) | (1L << BinaryIntegerLiteral))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Typeof - 64)) | (1L << (New - 64)) | (1L << (Void - 64)) | (1L << (Function - 64)) | (1L << (This - 64)) | (1L << (Delete - 64)) | (1L << (Class - 64)) | (1L << (Super - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteral - 64)) | (1L << (TemplateStringLiteral - 64)))) != 0))
                            {
                                {
                                    State = 230; expressionSequence();
                                }
                            }

                            State = 233; Match(SemiColon);
                            State = 235;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                            if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RegularExpressionLiteral) | (1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << PlusPlus) | (1L << MinusMinus) | (1L << Plus) | (1L << Minus) | (1L << BitNot) | (1L << Not) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral) | (1L << HexIntegerLiteral) | (1L << OctalIntegerLiteral) | (1L << OctalIntegerLiteral2) | (1L << BinaryIntegerLiteral))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Typeof - 64)) | (1L << (New - 64)) | (1L << (Void - 64)) | (1L << (Function - 64)) | (1L << (This - 64)) | (1L << (Delete - 64)) | (1L << (Class - 64)) | (1L << (Super - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteral - 64)) | (1L << (TemplateStringLiteral - 64)))) != 0))
                            {
                                {
                                    State = 234; expressionSequence();
                                }
                            }

                            State = 237; Match(CloseParen);
                            State = 238; statement();
                        }
                        break;
                    case 5:
                        _localctx = new ForInStatementContext(_localctx);
                        EnterOuterAlt(_localctx, 5);
                        {
                            State = 240; Match(For);
                            State = 241; Match(OpenParen);
                            State = 242; singleExpression(0);
                            State = 246;
                            ErrorHandler.Sync(this);
                            switch (TokenStream.LA(1))
                            {
                                case In:
                                    {
                                        State = 243; Match(In);
                                    }
                                    break;
                                case Identifier:
                                    {
                                        State = 244; Match(Identifier);
                                        State = 245;
                                        if (!(p("of"))) throw new FailedPredicateException(this, "p(\"of\")");
                                    }
                                    break;
                                default:
                                    throw new NoViableAltException(this);
                            }
                            State = 248; expressionSequence();
                            State = 249; Match(CloseParen);
                            State = 250; statement();
                        }
                        break;
                    case 6:
                        _localctx = new ForVarInStatementContext(_localctx);
                        EnterOuterAlt(_localctx, 6);
                        {
                            State = 252; Match(For);
                            State = 253; Match(OpenParen);
                            State = 254; varModifier();
                            State = 255; variableDeclaration();
                            State = 259;
                            ErrorHandler.Sync(this);
                            switch (TokenStream.LA(1))
                            {
                                case In:
                                    {
                                        State = 256; Match(In);
                                    }
                                    break;
                                case Identifier:
                                    {
                                        State = 257; Match(Identifier);
                                        State = 258;
                                        if (!(p("of"))) throw new FailedPredicateException(this, "p(\"of\")");
                                    }
                                    break;
                                default:
                                    throw new NoViableAltException(this);
                            }
                            State = 261; expressionSequence();
                            State = 262; Match(CloseParen);
                            State = 263; statement();
                        }
                        break;
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class VarModifierContext : ParserRuleContext
        {
            public ITerminalNode Var() { return GetToken(JavaScriptParser.Var, 0); }
            public ITerminalNode Let() { return GetToken(JavaScriptParser.Let, 0); }
            public ITerminalNode Const() { return GetToken(JavaScriptParser.Const, 0); }
            public VarModifierContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_varModifier; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterVarModifier(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitVarModifier(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVarModifier(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public VarModifierContext varModifier()
        {
            VarModifierContext _localctx = new VarModifierContext(Context, State);
            EnterRule(_localctx, 24, RULE_varModifier);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 267;
                    _la = TokenStream.LA(1);
                    if (!(((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (Var - 68)) | (1L << (Const - 68)) | (1L << (Let - 68)))) != 0)))
                    {
                        ErrorHandler.RecoverInline(this);
                    }
                    else
                    {
                        ErrorHandler.ReportMatch(this);
                        Consume();
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ContinueStatementContext : ParserRuleContext
        {
            public ITerminalNode Continue() { return GetToken(JavaScriptParser.Continue, 0); }
            public EosContext eos()
            {
                return GetRuleContext<EosContext>(0);
            }
            public ITerminalNode Identifier() { return GetToken(JavaScriptParser.Identifier, 0); }
            public ContinueStatementContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_continueStatement; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterContinueStatement(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitContinueStatement(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ContinueStatementContext continueStatement()
        {
            ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
            EnterRule(_localctx, 26, RULE_continueStatement);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 269; Match(Continue);
                    State = 272;
                    ErrorHandler.Sync(this);
                    switch (Interpreter.AdaptivePredict(TokenStream, 17, Context))
                    {
                        case 1:
                            {
                                State = 270;
                                if (!(notLineTerminator())) throw new FailedPredicateException(this, "notLineTerminator()");
                                State = 271; Match(Identifier);
                            }
                            break;
                    }
                    State = 274; eos();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class BreakStatementContext : ParserRuleContext
        {
            public ITerminalNode Break() { return GetToken(JavaScriptParser.Break, 0); }
            public EosContext eos()
            {
                return GetRuleContext<EosContext>(0);
            }
            public ITerminalNode Identifier() { return GetToken(JavaScriptParser.Identifier, 0); }
            public BreakStatementContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_breakStatement; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterBreakStatement(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitBreakStatement(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public BreakStatementContext breakStatement()
        {
            BreakStatementContext _localctx = new BreakStatementContext(Context, State);
            EnterRule(_localctx, 28, RULE_breakStatement);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 276; Match(Break);
                    State = 279;
                    ErrorHandler.Sync(this);
                    switch (Interpreter.AdaptivePredict(TokenStream, 18, Context))
                    {
                        case 1:
                            {
                                State = 277;
                                if (!(notLineTerminator())) throw new FailedPredicateException(this, "notLineTerminator()");
                                State = 278; Match(Identifier);
                            }
                            break;
                    }
                    State = 281; eos();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ReturnStatementContext : ParserRuleContext
        {
            public ITerminalNode Return() { return GetToken(JavaScriptParser.Return, 0); }
            public EosContext eos()
            {
                return GetRuleContext<EosContext>(0);
            }
            public ExpressionSequenceContext expressionSequence()
            {
                return GetRuleContext<ExpressionSequenceContext>(0);
            }
            public ReturnStatementContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_returnStatement; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterReturnStatement(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitReturnStatement(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ReturnStatementContext returnStatement()
        {
            ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
            EnterRule(_localctx, 30, RULE_returnStatement);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 283; Match(Return);
                    State = 286;
                    ErrorHandler.Sync(this);
                    switch (Interpreter.AdaptivePredict(TokenStream, 19, Context))
                    {
                        case 1:
                            {
                                State = 284;
                                if (!(notLineTerminator())) throw new FailedPredicateException(this, "notLineTerminator()");
                                State = 285; expressionSequence();
                            }
                            break;
                    }
                    State = 288; eos();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class WithStatementContext : ParserRuleContext
        {
            public ITerminalNode With() { return GetToken(JavaScriptParser.With, 0); }
            public ExpressionSequenceContext expressionSequence()
            {
                return GetRuleContext<ExpressionSequenceContext>(0);
            }
            public StatementContext statement()
            {
                return GetRuleContext<StatementContext>(0);
            }
            public WithStatementContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_withStatement; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterWithStatement(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitWithStatement(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitWithStatement(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public WithStatementContext withStatement()
        {
            WithStatementContext _localctx = new WithStatementContext(Context, State);
            EnterRule(_localctx, 32, RULE_withStatement);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 290; Match(With);
                    State = 291; Match(OpenParen);
                    State = 292; expressionSequence();
                    State = 293; Match(CloseParen);
                    State = 294; statement();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class SwitchStatementContext : ParserRuleContext
        {
            public ITerminalNode Switch() { return GetToken(JavaScriptParser.Switch, 0); }
            public ExpressionSequenceContext expressionSequence()
            {
                return GetRuleContext<ExpressionSequenceContext>(0);
            }
            public CaseBlockContext caseBlock()
            {
                return GetRuleContext<CaseBlockContext>(0);
            }
            public SwitchStatementContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_switchStatement; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterSwitchStatement(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitSwitchStatement(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitSwitchStatement(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public SwitchStatementContext switchStatement()
        {
            SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
            EnterRule(_localctx, 34, RULE_switchStatement);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 296; Match(Switch);
                    State = 297; Match(OpenParen);
                    State = 298; expressionSequence();
                    State = 299; Match(CloseParen);
                    State = 300; caseBlock();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class CaseBlockContext : ParserRuleContext
        {
            public CaseClausesContext[] caseClauses()
            {
                return GetRuleContexts<CaseClausesContext>();
            }
            public CaseClausesContext caseClauses(int i)
            {
                return GetRuleContext<CaseClausesContext>(i);
            }
            public DefaultClauseContext defaultClause()
            {
                return GetRuleContext<DefaultClauseContext>(0);
            }
            public CaseBlockContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_caseBlock; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterCaseBlock(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitCaseBlock(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitCaseBlock(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public CaseBlockContext caseBlock()
        {
            CaseBlockContext _localctx = new CaseBlockContext(Context, State);
            EnterRule(_localctx, 36, RULE_caseBlock);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 302; Match(OpenBrace);
                    State = 304;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    if (_la == Case)
                    {
                        {
                            State = 303; caseClauses();
                        }
                    }

                    State = 310;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    if (_la == Default)
                    {
                        {
                            State = 306; defaultClause();
                            State = 308;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                            if (_la == Case)
                            {
                                {
                                    State = 307; caseClauses();
                                }
                            }

                        }
                    }

                    State = 312; Match(CloseBrace);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class CaseClausesContext : ParserRuleContext
        {
            public CaseClauseContext[] caseClause()
            {
                return GetRuleContexts<CaseClauseContext>();
            }
            public CaseClauseContext caseClause(int i)
            {
                return GetRuleContext<CaseClauseContext>(i);
            }
            public CaseClausesContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_caseClauses; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterCaseClauses(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitCaseClauses(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitCaseClauses(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public CaseClausesContext caseClauses()
        {
            CaseClausesContext _localctx = new CaseClausesContext(Context, State);
            EnterRule(_localctx, 38, RULE_caseClauses);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 315;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    do
                    {
                        {
                            {
                                State = 314; caseClause();
                            }
                        }
                        State = 317;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                    } while (_la == Case);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class CaseClauseContext : ParserRuleContext
        {
            public ITerminalNode Case() { return GetToken(JavaScriptParser.Case, 0); }
            public ExpressionSequenceContext expressionSequence()
            {
                return GetRuleContext<ExpressionSequenceContext>(0);
            }
            public StatementListContext statementList()
            {
                return GetRuleContext<StatementListContext>(0);
            }
            public CaseClauseContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_caseClause; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterCaseClause(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitCaseClause(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitCaseClause(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public CaseClauseContext caseClause()
        {
            CaseClauseContext _localctx = new CaseClauseContext(Context, State);
            EnterRule(_localctx, 40, RULE_caseClause);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 319; Match(Case);
                    State = 320; expressionSequence();
                    State = 321; Match(Colon);
                    State = 323;
                    ErrorHandler.Sync(this);
                    switch (Interpreter.AdaptivePredict(TokenStream, 24, Context))
                    {
                        case 1:
                            {
                                State = 322; statementList();
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class DefaultClauseContext : ParserRuleContext
        {
            public ITerminalNode Default() { return GetToken(JavaScriptParser.Default, 0); }
            public StatementListContext statementList()
            {
                return GetRuleContext<StatementListContext>(0);
            }
            public DefaultClauseContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_defaultClause; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterDefaultClause(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitDefaultClause(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitDefaultClause(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public DefaultClauseContext defaultClause()
        {
            DefaultClauseContext _localctx = new DefaultClauseContext(Context, State);
            EnterRule(_localctx, 42, RULE_defaultClause);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 325; Match(Default);
                    State = 326; Match(Colon);
                    State = 328;
                    ErrorHandler.Sync(this);
                    switch (Interpreter.AdaptivePredict(TokenStream, 25, Context))
                    {
                        case 1:
                            {
                                State = 327; statementList();
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class LabelledStatementContext : ParserRuleContext
        {
            public ITerminalNode Identifier() { return GetToken(JavaScriptParser.Identifier, 0); }
            public StatementContext statement()
            {
                return GetRuleContext<StatementContext>(0);
            }
            public LabelledStatementContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_labelledStatement; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterLabelledStatement(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitLabelledStatement(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitLabelledStatement(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public LabelledStatementContext labelledStatement()
        {
            LabelledStatementContext _localctx = new LabelledStatementContext(Context, State);
            EnterRule(_localctx, 44, RULE_labelledStatement);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 330; Match(Identifier);
                    State = 331; Match(Colon);
                    State = 332; statement();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ThrowStatementContext : ParserRuleContext
        {
            public ITerminalNode Throw() { return GetToken(JavaScriptParser.Throw, 0); }
            public ExpressionSequenceContext expressionSequence()
            {
                return GetRuleContext<ExpressionSequenceContext>(0);
            }
            public EosContext eos()
            {
                return GetRuleContext<EosContext>(0);
            }
            public ThrowStatementContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_throwStatement; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterThrowStatement(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitThrowStatement(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitThrowStatement(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ThrowStatementContext throwStatement()
        {
            ThrowStatementContext _localctx = new ThrowStatementContext(Context, State);
            EnterRule(_localctx, 46, RULE_throwStatement);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 334; Match(Throw);
                    State = 335;
                    if (!(notLineTerminator())) throw new FailedPredicateException(this, "notLineTerminator()");
                    State = 336; expressionSequence();
                    State = 337; eos();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class TryStatementContext : ParserRuleContext
        {
            public ITerminalNode Try() { return GetToken(JavaScriptParser.Try, 0); }
            public BlockContext block()
            {
                return GetRuleContext<BlockContext>(0);
            }
            public CatchProductionContext catchProduction()
            {
                return GetRuleContext<CatchProductionContext>(0);
            }
            public FinallyProductionContext finallyProduction()
            {
                return GetRuleContext<FinallyProductionContext>(0);
            }
            public TryStatementContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_tryStatement; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterTryStatement(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitTryStatement(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitTryStatement(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public TryStatementContext tryStatement()
        {
            TryStatementContext _localctx = new TryStatementContext(Context, State);
            EnterRule(_localctx, 48, RULE_tryStatement);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 339; Match(Try);
                    State = 340; block();
                    State = 346;
                    ErrorHandler.Sync(this);
                    switch (TokenStream.LA(1))
                    {
                        case Catch:
                            {
                                State = 341; catchProduction();
                                State = 343;
                                ErrorHandler.Sync(this);
                                switch (Interpreter.AdaptivePredict(TokenStream, 26, Context))
                                {
                                    case 1:
                                        {
                                            State = 342; finallyProduction();
                                        }
                                        break;
                                }
                            }
                            break;
                        case Finally:
                            {
                                State = 345; finallyProduction();
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class CatchProductionContext : ParserRuleContext
        {
            public ITerminalNode Catch() { return GetToken(JavaScriptParser.Catch, 0); }
            public ITerminalNode Identifier() { return GetToken(JavaScriptParser.Identifier, 0); }
            public BlockContext block()
            {
                return GetRuleContext<BlockContext>(0);
            }
            public CatchProductionContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_catchProduction; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterCatchProduction(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitCatchProduction(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitCatchProduction(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public CatchProductionContext catchProduction()
        {
            CatchProductionContext _localctx = new CatchProductionContext(Context, State);
            EnterRule(_localctx, 50, RULE_catchProduction);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 348; Match(Catch);
                    State = 349; Match(OpenParen);
                    State = 350; Match(Identifier);
                    State = 351; Match(CloseParen);
                    State = 352; block();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class FinallyProductionContext : ParserRuleContext
        {
            public ITerminalNode Finally() { return GetToken(JavaScriptParser.Finally, 0); }
            public BlockContext block()
            {
                return GetRuleContext<BlockContext>(0);
            }
            public FinallyProductionContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_finallyProduction; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterFinallyProduction(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitFinallyProduction(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitFinallyProduction(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public FinallyProductionContext finallyProduction()
        {
            FinallyProductionContext _localctx = new FinallyProductionContext(Context, State);
            EnterRule(_localctx, 52, RULE_finallyProduction);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 354; Match(Finally);
                    State = 355; block();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class DebuggerStatementContext : ParserRuleContext
        {
            public ITerminalNode Debugger() { return GetToken(JavaScriptParser.Debugger, 0); }
            public EosContext eos()
            {
                return GetRuleContext<EosContext>(0);
            }
            public DebuggerStatementContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_debuggerStatement; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterDebuggerStatement(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitDebuggerStatement(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitDebuggerStatement(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public DebuggerStatementContext debuggerStatement()
        {
            DebuggerStatementContext _localctx = new DebuggerStatementContext(Context, State);
            EnterRule(_localctx, 54, RULE_debuggerStatement);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 357; Match(Debugger);
                    State = 358; eos();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class FunctionDeclarationContext : ParserRuleContext
        {
            public ITerminalNode Function() { return GetToken(JavaScriptParser.Function, 0); }
            public ITerminalNode Identifier() { return GetToken(JavaScriptParser.Identifier, 0); }
            public FunctionBodyContext functionBody()
            {
                return GetRuleContext<FunctionBodyContext>(0);
            }
            public FormalParameterListContext formalParameterList()
            {
                return GetRuleContext<FormalParameterListContext>(0);
            }
            public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_functionDeclaration; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public FunctionDeclarationContext functionDeclaration()
        {
            FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
            EnterRule(_localctx, 56, RULE_functionDeclaration);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 360; Match(Function);
                    State = 361; Match(Identifier);
                    State = 362; Match(OpenParen);
                    State = 364;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenBrace) | (1L << Ellipsis))) != 0) || _la == Identifier)
                    {
                        {
                            State = 363; formalParameterList();
                        }
                    }

                    State = 366; Match(CloseParen);
                    State = 367; Match(OpenBrace);
                    State = 368; functionBody();
                    State = 369; Match(CloseBrace);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ClassDeclarationContext : ParserRuleContext
        {
            public ITerminalNode Class() { return GetToken(JavaScriptParser.Class, 0); }
            public ITerminalNode Identifier() { return GetToken(JavaScriptParser.Identifier, 0); }
            public ClassTailContext classTail()
            {
                return GetRuleContext<ClassTailContext>(0);
            }
            public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_classDeclaration; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterClassDeclaration(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitClassDeclaration(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ClassDeclarationContext classDeclaration()
        {
            ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
            EnterRule(_localctx, 58, RULE_classDeclaration);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 371; Match(Class);
                    State = 372; Match(Identifier);
                    State = 373; classTail();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ClassTailContext : ParserRuleContext
        {
            public ITerminalNode Extends() { return GetToken(JavaScriptParser.Extends, 0); }
            public SingleExpressionContext singleExpression()
            {
                return GetRuleContext<SingleExpressionContext>(0);
            }
            public ClassElementContext[] classElement()
            {
                return GetRuleContexts<ClassElementContext>();
            }
            public ClassElementContext classElement(int i)
            {
                return GetRuleContext<ClassElementContext>(i);
            }
            public ClassTailContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_classTail; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterClassTail(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitClassTail(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitClassTail(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ClassTailContext classTail()
        {
            ClassTailContext _localctx = new ClassTailContext(Context, State);
            EnterRule(_localctx, 60, RULE_classTail);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 377;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    if (_la == Extends)
                    {
                        {
                            State = 375; Match(Extends);
                            State = 376; singleExpression(0);
                        }
                    }

                    State = 379; Match(OpenBrace);
                    State = 383;
                    ErrorHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(TokenStream, 30, Context);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 380; classElement();
                                }
                            }
                        }
                        State = 385;
                        ErrorHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(TokenStream, 30, Context);
                    }
                    State = 386; Match(CloseBrace);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ClassElementContext : ParserRuleContext
        {
            public MethodDefinitionContext methodDefinition()
            {
                return GetRuleContext<MethodDefinitionContext>(0);
            }
            public ITerminalNode Static() { return GetToken(JavaScriptParser.Static, 0); }
            public ITerminalNode Identifier() { return GetToken(JavaScriptParser.Identifier, 0); }
            public EmptyStatementContext emptyStatement()
            {
                return GetRuleContext<EmptyStatementContext>(0);
            }
            public ClassElementContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_classElement; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterClassElement(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitClassElement(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitClassElement(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ClassElementContext classElement()
        {
            ClassElementContext _localctx = new ClassElementContext(Context, State);
            EnterRule(_localctx, 62, RULE_classElement);
            try
            {
                State = 395;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 32, Context))
                {
                    case 1:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 391;
                            ErrorHandler.Sync(this);
                            switch (Interpreter.AdaptivePredict(TokenStream, 31, Context))
                            {
                                case 1:
                                    {
                                        State = 388; Match(Static);
                                    }
                                    break;
                                case 2:
                                    {
                                        State = 389;
                                        if (!(n("static"))) throw new FailedPredicateException(this, "n(\"static\")");
                                        State = 390; Match(Identifier);
                                    }
                                    break;
                            }
                            State = 393; methodDefinition();
                        }
                        break;
                    case 2:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 394; emptyStatement();
                        }
                        break;
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class MethodDefinitionContext : ParserRuleContext
        {
            public PropertyNameContext propertyName()
            {
                return GetRuleContext<PropertyNameContext>(0);
            }
            public FunctionBodyContext functionBody()
            {
                return GetRuleContext<FunctionBodyContext>(0);
            }
            public FormalParameterListContext formalParameterList()
            {
                return GetRuleContext<FormalParameterListContext>(0);
            }
            public GetterContext getter()
            {
                return GetRuleContext<GetterContext>(0);
            }
            public SetterContext setter()
            {
                return GetRuleContext<SetterContext>(0);
            }
            public GeneratorMethodContext generatorMethod()
            {
                return GetRuleContext<GeneratorMethodContext>(0);
            }
            public MethodDefinitionContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_methodDefinition; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterMethodDefinition(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitMethodDefinition(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitMethodDefinition(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public MethodDefinitionContext methodDefinition()
        {
            MethodDefinitionContext _localctx = new MethodDefinitionContext(Context, State);
            EnterRule(_localctx, 64, RULE_methodDefinition);
            int _la;
            try
            {
                State = 425;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 35, Context))
                {
                    case 1:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 397; propertyName();
                            State = 398; Match(OpenParen);
                            State = 400;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                            if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenBrace) | (1L << Ellipsis))) != 0) || _la == Identifier)
                            {
                                {
                                    State = 399; formalParameterList();
                                }
                            }

                            State = 402; Match(CloseParen);
                            State = 403; Match(OpenBrace);
                            State = 404; functionBody();
                            State = 405; Match(CloseBrace);
                        }
                        break;
                    case 2:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 407; getter();
                            State = 408; Match(OpenParen);
                            State = 409; Match(CloseParen);
                            State = 410; Match(OpenBrace);
                            State = 411; functionBody();
                            State = 412; Match(CloseBrace);
                        }
                        break;
                    case 3:
                        EnterOuterAlt(_localctx, 3);
                        {
                            State = 414; setter();
                            State = 415; Match(OpenParen);
                            State = 417;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                            if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenBrace) | (1L << Ellipsis))) != 0) || _la == Identifier)
                            {
                                {
                                    State = 416; formalParameterList();
                                }
                            }

                            State = 419; Match(CloseParen);
                            State = 420; Match(OpenBrace);
                            State = 421; functionBody();
                            State = 422; Match(CloseBrace);
                        }
                        break;
                    case 4:
                        EnterOuterAlt(_localctx, 4);
                        {
                            State = 424; generatorMethod();
                        }
                        break;
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class GeneratorMethodContext : ParserRuleContext
        {
            public ITerminalNode Identifier() { return GetToken(JavaScriptParser.Identifier, 0); }
            public FunctionBodyContext functionBody()
            {
                return GetRuleContext<FunctionBodyContext>(0);
            }
            public FormalParameterListContext formalParameterList()
            {
                return GetRuleContext<FormalParameterListContext>(0);
            }
            public GeneratorMethodContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_generatorMethod; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterGeneratorMethod(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitGeneratorMethod(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitGeneratorMethod(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public GeneratorMethodContext generatorMethod()
        {
            GeneratorMethodContext _localctx = new GeneratorMethodContext(Context, State);
            EnterRule(_localctx, 66, RULE_generatorMethod);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 428;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    if (_la == Multiply)
                    {
                        {
                            State = 427; Match(Multiply);
                        }
                    }

                    State = 430; Match(Identifier);
                    State = 431; Match(OpenParen);
                    State = 433;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenBrace) | (1L << Ellipsis))) != 0) || _la == Identifier)
                    {
                        {
                            State = 432; formalParameterList();
                        }
                    }

                    State = 435; Match(CloseParen);
                    State = 436; Match(OpenBrace);
                    State = 437; functionBody();
                    State = 438; Match(CloseBrace);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class FormalParameterListContext : ParserRuleContext
        {
            public FormalParameterArgContext[] formalParameterArg()
            {
                return GetRuleContexts<FormalParameterArgContext>();
            }
            public FormalParameterArgContext formalParameterArg(int i)
            {
                return GetRuleContext<FormalParameterArgContext>(i);
            }
            public LastFormalParameterArgContext lastFormalParameterArg()
            {
                return GetRuleContext<LastFormalParameterArgContext>(0);
            }
            public ArrayLiteralContext arrayLiteral()
            {
                return GetRuleContext<ArrayLiteralContext>(0);
            }
            public ObjectLiteralContext objectLiteral()
            {
                return GetRuleContext<ObjectLiteralContext>(0);
            }
            public FormalParameterListContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_formalParameterList; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterFormalParameterList(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitFormalParameterList(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitFormalParameterList(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public FormalParameterListContext formalParameterList()
        {
            FormalParameterListContext _localctx = new FormalParameterListContext(Context, State);
            EnterRule(_localctx, 68, RULE_formalParameterList);
            int _la;
            try
            {
                int _alt;
                State = 455;
                ErrorHandler.Sync(this);
                switch (TokenStream.LA(1))
                {
                    case Identifier:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 440; formalParameterArg();
                            State = 445;
                            ErrorHandler.Sync(this);
                            _alt = Interpreter.AdaptivePredict(TokenStream, 38, Context);
                            while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
                            {
                                if (_alt == 1)
                                {
                                    {
                                        {
                                            State = 441; Match(Comma);
                                            State = 442; formalParameterArg();
                                        }
                                    }
                                }
                                State = 447;
                                ErrorHandler.Sync(this);
                                _alt = Interpreter.AdaptivePredict(TokenStream, 38, Context);
                            }
                            State = 450;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                            if (_la == Comma)
                            {
                                {
                                    State = 448; Match(Comma);
                                    State = 449; lastFormalParameterArg();
                                }
                            }

                        }
                        break;
                    case Ellipsis:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 452; lastFormalParameterArg();
                        }
                        break;
                    case OpenBracket:
                        EnterOuterAlt(_localctx, 3);
                        {
                            State = 453; arrayLiteral();
                        }
                        break;
                    case OpenBrace:
                        EnterOuterAlt(_localctx, 4);
                        {
                            State = 454; objectLiteral();
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class FormalParameterArgContext : ParserRuleContext
        {
            public ITerminalNode Identifier() { return GetToken(JavaScriptParser.Identifier, 0); }
            public SingleExpressionContext singleExpression()
            {
                return GetRuleContext<SingleExpressionContext>(0);
            }
            public FormalParameterArgContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_formalParameterArg; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterFormalParameterArg(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitFormalParameterArg(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitFormalParameterArg(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public FormalParameterArgContext formalParameterArg()
        {
            FormalParameterArgContext _localctx = new FormalParameterArgContext(Context, State);
            EnterRule(_localctx, 70, RULE_formalParameterArg);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 457; Match(Identifier);
                    State = 460;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    if (_la == Assign)
                    {
                        {
                            State = 458; Match(Assign);
                            State = 459; singleExpression(0);
                        }
                    }

                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class LastFormalParameterArgContext : ParserRuleContext
        {
            public ITerminalNode Ellipsis() { return GetToken(JavaScriptParser.Ellipsis, 0); }
            public ITerminalNode Identifier() { return GetToken(JavaScriptParser.Identifier, 0); }
            public LastFormalParameterArgContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_lastFormalParameterArg; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterLastFormalParameterArg(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitLastFormalParameterArg(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitLastFormalParameterArg(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public LastFormalParameterArgContext lastFormalParameterArg()
        {
            LastFormalParameterArgContext _localctx = new LastFormalParameterArgContext(Context, State);
            EnterRule(_localctx, 72, RULE_lastFormalParameterArg);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 462; Match(Ellipsis);
                    State = 463; Match(Identifier);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class FunctionBodyContext : ParserRuleContext
        {
            public SourceElementsContext sourceElements()
            {
                return GetRuleContext<SourceElementsContext>(0);
            }
            public FunctionBodyContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_functionBody; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterFunctionBody(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitFunctionBody(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitFunctionBody(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public FunctionBodyContext functionBody()
        {
            FunctionBodyContext _localctx = new FunctionBodyContext(Context, State);
            EnterRule(_localctx, 74, RULE_functionBody);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 466;
                    ErrorHandler.Sync(this);
                    switch (Interpreter.AdaptivePredict(TokenStream, 42, Context))
                    {
                        case 1:
                            {
                                State = 465; sourceElements();
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class SourceElementsContext : ParserRuleContext
        {
            public SourceElementContext[] sourceElement()
            {
                return GetRuleContexts<SourceElementContext>();
            }
            public SourceElementContext sourceElement(int i)
            {
                return GetRuleContext<SourceElementContext>(i);
            }
            public SourceElementsContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_sourceElements; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterSourceElements(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitSourceElements(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitSourceElements(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public SourceElementsContext sourceElements()
        {
            SourceElementsContext _localctx = new SourceElementsContext(Context, State);
            EnterRule(_localctx, 76, RULE_sourceElements);
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 469;
                    ErrorHandler.Sync(this);
                    _alt = 1;
                    do
                    {
                        switch (_alt)
                        {
                            case 1:
                                {
                                    {
                                        State = 468; sourceElement();
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        State = 471;
                        ErrorHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(TokenStream, 43, Context);
                    } while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ArrayLiteralContext : ParserRuleContext
        {
            public ElementListContext elementList()
            {
                return GetRuleContext<ElementListContext>(0);
            }
            public ArrayLiteralContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_arrayLiteral; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterArrayLiteral(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitArrayLiteral(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitArrayLiteral(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ArrayLiteralContext arrayLiteral()
        {
            ArrayLiteralContext _localctx = new ArrayLiteralContext(Context, State);
            EnterRule(_localctx, 78, RULE_arrayLiteral);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 473; Match(OpenBracket);
                    State = 477;
                    ErrorHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(TokenStream, 44, Context);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 474; Match(Comma);
                                }
                            }
                        }
                        State = 479;
                        ErrorHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(TokenStream, 44, Context);
                    }
                    State = 481;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RegularExpressionLiteral) | (1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << Ellipsis) | (1L << PlusPlus) | (1L << MinusMinus) | (1L << Plus) | (1L << Minus) | (1L << BitNot) | (1L << Not) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral) | (1L << HexIntegerLiteral) | (1L << OctalIntegerLiteral) | (1L << OctalIntegerLiteral2) | (1L << BinaryIntegerLiteral))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Typeof - 64)) | (1L << (New - 64)) | (1L << (Void - 64)) | (1L << (Function - 64)) | (1L << (This - 64)) | (1L << (Delete - 64)) | (1L << (Class - 64)) | (1L << (Super - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteral - 64)) | (1L << (TemplateStringLiteral - 64)))) != 0))
                    {
                        {
                            State = 480; elementList();
                        }
                    }

                    State = 486;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    while (_la == Comma)
                    {
                        {
                            {
                                State = 483; Match(Comma);
                            }
                        }
                        State = 488;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                    }
                    State = 489; Match(CloseBracket);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ElementListContext : ParserRuleContext
        {
            public SingleExpressionContext[] singleExpression()
            {
                return GetRuleContexts<SingleExpressionContext>();
            }
            public SingleExpressionContext singleExpression(int i)
            {
                return GetRuleContext<SingleExpressionContext>(i);
            }
            public LastElementContext lastElement()
            {
                return GetRuleContext<LastElementContext>(0);
            }
            public ElementListContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_elementList; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterElementList(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitElementList(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitElementList(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ElementListContext elementList()
        {
            ElementListContext _localctx = new ElementListContext(Context, State);
            EnterRule(_localctx, 80, RULE_elementList);
            int _la;
            try
            {
                int _alt;
                State = 512;
                ErrorHandler.Sync(this);
                switch (TokenStream.LA(1))
                {
                    case RegularExpressionLiteral:
                    case OpenBracket:
                    case OpenParen:
                    case OpenBrace:
                    case PlusPlus:
                    case MinusMinus:
                    case Plus:
                    case Minus:
                    case BitNot:
                    case Not:
                    case NullLiteral:
                    case BooleanLiteral:
                    case DecimalLiteral:
                    case HexIntegerLiteral:
                    case OctalIntegerLiteral:
                    case OctalIntegerLiteral2:
                    case BinaryIntegerLiteral:
                    case Typeof:
                    case New:
                    case Void:
                    case Function:
                    case This:
                    case Delete:
                    case Class:
                    case Super:
                    case Identifier:
                    case StringLiteral:
                    case TemplateStringLiteral:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 491; singleExpression(0);
                            State = 500;
                            ErrorHandler.Sync(this);
                            _alt = Interpreter.AdaptivePredict(TokenStream, 48, Context);
                            while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
                            {
                                if (_alt == 1)
                                {
                                    {
                                        {
                                            State = 493;
                                            ErrorHandler.Sync(this);
                                            _la = TokenStream.LA(1);
                                            do
                                            {
                                                {
                                                    {
                                                        State = 492; Match(Comma);
                                                    }
                                                }
                                                State = 495;
                                                ErrorHandler.Sync(this);
                                                _la = TokenStream.LA(1);
                                            } while (_la == Comma);
                                            State = 497; singleExpression(0);
                                        }
                                    }
                                }
                                State = 502;
                                ErrorHandler.Sync(this);
                                _alt = Interpreter.AdaptivePredict(TokenStream, 48, Context);
                            }
                            State = 509;
                            ErrorHandler.Sync(this);
                            switch (Interpreter.AdaptivePredict(TokenStream, 50, Context))
                            {
                                case 1:
                                    {
                                        State = 504;
                                        ErrorHandler.Sync(this);
                                        _la = TokenStream.LA(1);
                                        do
                                        {
                                            {
                                                {
                                                    State = 503; Match(Comma);
                                                }
                                            }
                                            State = 506;
                                            ErrorHandler.Sync(this);
                                            _la = TokenStream.LA(1);
                                        } while (_la == Comma);
                                        State = 508; lastElement();
                                    }
                                    break;
                            }
                        }
                        break;
                    case Ellipsis:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 511; lastElement();
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class LastElementContext : ParserRuleContext
        {
            public ITerminalNode Ellipsis() { return GetToken(JavaScriptParser.Ellipsis, 0); }
            public ITerminalNode Identifier() { return GetToken(JavaScriptParser.Identifier, 0); }
            public LastElementContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_lastElement; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterLastElement(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitLastElement(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitLastElement(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public LastElementContext lastElement()
        {
            LastElementContext _localctx = new LastElementContext(Context, State);
            EnterRule(_localctx, 82, RULE_lastElement);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 514; Match(Ellipsis);
                    State = 515; Match(Identifier);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ObjectLiteralContext : ParserRuleContext
        {
            public PropertyAssignmentContext[] propertyAssignment()
            {
                return GetRuleContexts<PropertyAssignmentContext>();
            }
            public PropertyAssignmentContext propertyAssignment(int i)
            {
                return GetRuleContext<PropertyAssignmentContext>(i);
            }
            public ObjectLiteralContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_objectLiteral; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterObjectLiteral(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitObjectLiteral(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitObjectLiteral(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ObjectLiteralContext objectLiteral()
        {
            ObjectLiteralContext _localctx = new ObjectLiteralContext(Context, State);
            EnterRule(_localctx, 84, RULE_objectLiteral);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 517; Match(OpenBrace);
                    State = 526;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << Multiply) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral) | (1L << HexIntegerLiteral) | (1L << OctalIntegerLiteral) | (1L << OctalIntegerLiteral2) | (1L << BinaryIntegerLiteral) | (1L << Break) | (1L << Do) | (1L << Instanceof))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Typeof - 64)) | (1L << (Case - 64)) | (1L << (Else - 64)) | (1L << (New - 64)) | (1L << (Var - 64)) | (1L << (Catch - 64)) | (1L << (Finally - 64)) | (1L << (Return - 64)) | (1L << (Void - 64)) | (1L << (Continue - 64)) | (1L << (For - 64)) | (1L << (Switch - 64)) | (1L << (While - 64)) | (1L << (Debugger - 64)) | (1L << (Function - 64)) | (1L << (This - 64)) | (1L << (With - 64)) | (1L << (Default - 64)) | (1L << (If - 64)) | (1L << (Throw - 64)) | (1L << (Delete - 64)) | (1L << (In - 64)) | (1L << (Try - 64)) | (1L << (Class - 64)) | (1L << (Enum - 64)) | (1L << (Extends - 64)) | (1L << (Super - 64)) | (1L << (Const - 64)) | (1L << (Export - 64)) | (1L << (Import - 64)) | (1L << (Implements - 64)) | (1L << (Let - 64)) | (1L << (Private - 64)) | (1L << (Public - 64)) | (1L << (Interface - 64)) | (1L << (Package - 64)) | (1L << (Protected - 64)) | (1L << (Static - 64)) | (1L << (Yield - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteral - 64)))) != 0))
                    {
                        {
                            State = 518; propertyAssignment();
                            State = 523;
                            ErrorHandler.Sync(this);
                            _alt = Interpreter.AdaptivePredict(TokenStream, 52, Context);
                            while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
                            {
                                if (_alt == 1)
                                {
                                    {
                                        {
                                            State = 519; Match(Comma);
                                            State = 520; propertyAssignment();
                                        }
                                    }
                                }
                                State = 525;
                                ErrorHandler.Sync(this);
                                _alt = Interpreter.AdaptivePredict(TokenStream, 52, Context);
                            }
                        }
                    }

                    State = 529;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    if (_la == Comma)
                    {
                        {
                            State = 528; Match(Comma);
                        }
                    }

                    State = 531; Match(CloseBrace);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class PropertyAssignmentContext : ParserRuleContext
        {
            public PropertyAssignmentContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_propertyAssignment; } }

            public PropertyAssignmentContext() { }
            public virtual void CopyFrom(PropertyAssignmentContext context)
            {
                base.CopyFrom(context);
            }
        }
        public partial class PropertyExpressionAssignmentContext : PropertyAssignmentContext
        {
            public PropertyNameContext propertyName()
            {
                return GetRuleContext<PropertyNameContext>(0);
            }
            public SingleExpressionContext singleExpression()
            {
                return GetRuleContext<SingleExpressionContext>(0);
            }
            public PropertyExpressionAssignmentContext(PropertyAssignmentContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterPropertyExpressionAssignment(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitPropertyExpressionAssignment(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitPropertyExpressionAssignment(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class ComputedPropertyExpressionAssignmentContext : PropertyAssignmentContext
        {
            public SingleExpressionContext[] singleExpression()
            {
                return GetRuleContexts<SingleExpressionContext>();
            }
            public SingleExpressionContext singleExpression(int i)
            {
                return GetRuleContext<SingleExpressionContext>(i);
            }
            public ComputedPropertyExpressionAssignmentContext(PropertyAssignmentContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterComputedPropertyExpressionAssignment(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitComputedPropertyExpressionAssignment(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitComputedPropertyExpressionAssignment(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class PropertyShorthandContext : PropertyAssignmentContext
        {
            public ITerminalNode Identifier() { return GetToken(JavaScriptParser.Identifier, 0); }
            public PropertyShorthandContext(PropertyAssignmentContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterPropertyShorthand(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitPropertyShorthand(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitPropertyShorthand(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class PropertySetterContext : PropertyAssignmentContext
        {
            public SetterContext setter()
            {
                return GetRuleContext<SetterContext>(0);
            }
            public ITerminalNode Identifier() { return GetToken(JavaScriptParser.Identifier, 0); }
            public FunctionBodyContext functionBody()
            {
                return GetRuleContext<FunctionBodyContext>(0);
            }
            public PropertySetterContext(PropertyAssignmentContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterPropertySetter(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitPropertySetter(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitPropertySetter(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class PropertyGetterContext : PropertyAssignmentContext
        {
            public GetterContext getter()
            {
                return GetRuleContext<GetterContext>(0);
            }
            public FunctionBodyContext functionBody()
            {
                return GetRuleContext<FunctionBodyContext>(0);
            }
            public PropertyGetterContext(PropertyAssignmentContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterPropertyGetter(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitPropertyGetter(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitPropertyGetter(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class MethodPropertyContext : PropertyAssignmentContext
        {
            public GeneratorMethodContext generatorMethod()
            {
                return GetRuleContext<GeneratorMethodContext>(0);
            }
            public MethodPropertyContext(PropertyAssignmentContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterMethodProperty(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitMethodProperty(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitMethodProperty(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public PropertyAssignmentContext propertyAssignment()
        {
            PropertyAssignmentContext _localctx = new PropertyAssignmentContext(Context, State);
            EnterRule(_localctx, 86, RULE_propertyAssignment);
            int _la;
            try
            {
                State = 560;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 55, Context))
                {
                    case 1:
                        _localctx = new PropertyExpressionAssignmentContext(_localctx);
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 533; propertyName();
                            State = 534;
                            _la = TokenStream.LA(1);
                            if (!(_la == Assign || _la == Colon))
                            {
                                ErrorHandler.RecoverInline(this);
                            }
                            else
                            {
                                ErrorHandler.ReportMatch(this);
                                Consume();
                            }
                            State = 535; singleExpression(0);
                        }
                        break;
                    case 2:
                        _localctx = new ComputedPropertyExpressionAssignmentContext(_localctx);
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 537; Match(OpenBracket);
                            State = 538; singleExpression(0);
                            State = 539; Match(CloseBracket);
                            State = 540; Match(Colon);
                            State = 541; singleExpression(0);
                        }
                        break;
                    case 3:
                        _localctx = new PropertyGetterContext(_localctx);
                        EnterOuterAlt(_localctx, 3);
                        {
                            State = 543; getter();
                            State = 544; Match(OpenParen);
                            State = 545; Match(CloseParen);
                            State = 546; Match(OpenBrace);
                            State = 547; functionBody();
                            State = 548; Match(CloseBrace);
                        }
                        break;
                    case 4:
                        _localctx = new PropertySetterContext(_localctx);
                        EnterOuterAlt(_localctx, 4);
                        {
                            State = 550; setter();
                            State = 551; Match(OpenParen);
                            State = 552; Match(Identifier);
                            State = 553; Match(CloseParen);
                            State = 554; Match(OpenBrace);
                            State = 555; functionBody();
                            State = 556; Match(CloseBrace);
                        }
                        break;
                    case 5:
                        _localctx = new MethodPropertyContext(_localctx);
                        EnterOuterAlt(_localctx, 5);
                        {
                            State = 558; generatorMethod();
                        }
                        break;
                    case 6:
                        _localctx = new PropertyShorthandContext(_localctx);
                        EnterOuterAlt(_localctx, 6);
                        {
                            State = 559; Match(Identifier);
                        }
                        break;
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class PropertyNameContext : ParserRuleContext
        {
            public IdentifierNameContext identifierName()
            {
                return GetRuleContext<IdentifierNameContext>(0);
            }
            public ITerminalNode StringLiteral() { return GetToken(JavaScriptParser.StringLiteral, 0); }
            public NumericLiteralContext numericLiteral()
            {
                return GetRuleContext<NumericLiteralContext>(0);
            }
            public PropertyNameContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_propertyName; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterPropertyName(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitPropertyName(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitPropertyName(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public PropertyNameContext propertyName()
        {
            PropertyNameContext _localctx = new PropertyNameContext(Context, State);
            EnterRule(_localctx, 88, RULE_propertyName);
            try
            {
                State = 565;
                ErrorHandler.Sync(this);
                switch (TokenStream.LA(1))
                {
                    case NullLiteral:
                    case BooleanLiteral:
                    case Break:
                    case Do:
                    case Instanceof:
                    case Typeof:
                    case Case:
                    case Else:
                    case New:
                    case Var:
                    case Catch:
                    case Finally:
                    case Return:
                    case Void:
                    case Continue:
                    case For:
                    case Switch:
                    case While:
                    case Debugger:
                    case Function:
                    case This:
                    case With:
                    case Default:
                    case If:
                    case Throw:
                    case Delete:
                    case In:
                    case Try:
                    case Class:
                    case Enum:
                    case Extends:
                    case Super:
                    case Const:
                    case Export:
                    case Import:
                    case Implements:
                    case Let:
                    case Private:
                    case Public:
                    case Interface:
                    case Package:
                    case Protected:
                    case Static:
                    case Yield:
                    case Identifier:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 562; identifierName();
                        }
                        break;
                    case StringLiteral:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 563; Match(StringLiteral);
                        }
                        break;
                    case DecimalLiteral:
                    case HexIntegerLiteral:
                    case OctalIntegerLiteral:
                    case OctalIntegerLiteral2:
                    case BinaryIntegerLiteral:
                        EnterOuterAlt(_localctx, 3);
                        {
                            State = 564; numericLiteral();
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ArgumentsContext : ParserRuleContext
        {
            public SingleExpressionContext[] singleExpression()
            {
                return GetRuleContexts<SingleExpressionContext>();
            }
            public SingleExpressionContext singleExpression(int i)
            {
                return GetRuleContext<SingleExpressionContext>(i);
            }
            public LastArgumentContext lastArgument()
            {
                return GetRuleContext<LastArgumentContext>(0);
            }
            public ArgumentsContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_arguments; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterArguments(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitArguments(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitArguments(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ArgumentsContext arguments()
        {
            ArgumentsContext _localctx = new ArgumentsContext(Context, State);
            EnterRule(_localctx, 90, RULE_arguments);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 567; Match(OpenParen);
                    State = 581;
                    ErrorHandler.Sync(this);
                    switch (TokenStream.LA(1))
                    {
                        case RegularExpressionLiteral:
                        case OpenBracket:
                        case OpenParen:
                        case OpenBrace:
                        case PlusPlus:
                        case MinusMinus:
                        case Plus:
                        case Minus:
                        case BitNot:
                        case Not:
                        case NullLiteral:
                        case BooleanLiteral:
                        case DecimalLiteral:
                        case HexIntegerLiteral:
                        case OctalIntegerLiteral:
                        case OctalIntegerLiteral2:
                        case BinaryIntegerLiteral:
                        case Typeof:
                        case New:
                        case Void:
                        case Function:
                        case This:
                        case Delete:
                        case Class:
                        case Super:
                        case Identifier:
                        case StringLiteral:
                        case TemplateStringLiteral:
                            {
                                State = 568; singleExpression(0);
                                State = 573;
                                ErrorHandler.Sync(this);
                                _alt = Interpreter.AdaptivePredict(TokenStream, 57, Context);
                                while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
                                {
                                    if (_alt == 1)
                                    {
                                        {
                                            {
                                                State = 569; Match(Comma);
                                                State = 570; singleExpression(0);
                                            }
                                        }
                                    }
                                    State = 575;
                                    ErrorHandler.Sync(this);
                                    _alt = Interpreter.AdaptivePredict(TokenStream, 57, Context);
                                }
                                State = 578;
                                ErrorHandler.Sync(this);
                                _la = TokenStream.LA(1);
                                if (_la == Comma)
                                {
                                    {
                                        State = 576; Match(Comma);
                                        State = 577; lastArgument();
                                    }
                                }

                            }
                            break;
                        case Ellipsis:
                            {
                                State = 580; lastArgument();
                            }
                            break;
                        case CloseParen:
                            break;
                        default:
                            break;
                    }
                    State = 583; Match(CloseParen);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class LastArgumentContext : ParserRuleContext
        {
            public ITerminalNode Ellipsis() { return GetToken(JavaScriptParser.Ellipsis, 0); }
            public ITerminalNode Identifier() { return GetToken(JavaScriptParser.Identifier, 0); }
            public LastArgumentContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_lastArgument; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterLastArgument(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitLastArgument(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitLastArgument(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public LastArgumentContext lastArgument()
        {
            LastArgumentContext _localctx = new LastArgumentContext(Context, State);
            EnterRule(_localctx, 92, RULE_lastArgument);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 585; Match(Ellipsis);
                    State = 586; Match(Identifier);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ExpressionSequenceContext : ParserRuleContext
        {
            public SingleExpressionContext[] singleExpression()
            {
                return GetRuleContexts<SingleExpressionContext>();
            }
            public SingleExpressionContext singleExpression(int i)
            {
                return GetRuleContext<SingleExpressionContext>(i);
            }
            public ExpressionSequenceContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_expressionSequence; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterExpressionSequence(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitExpressionSequence(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitExpressionSequence(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ExpressionSequenceContext expressionSequence()
        {
            ExpressionSequenceContext _localctx = new ExpressionSequenceContext(Context, State);
            EnterRule(_localctx, 94, RULE_expressionSequence);
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 588; singleExpression(0);
                    State = 593;
                    ErrorHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(TokenStream, 60, Context);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 589; Match(Comma);
                                    State = 590; singleExpression(0);
                                }
                            }
                        }
                        State = 595;
                        ErrorHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(TokenStream, 60, Context);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class SingleExpressionContext : ParserRuleContext
        {
            public SingleExpressionContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_singleExpression; } }

            public SingleExpressionContext() { }
            public virtual void CopyFrom(SingleExpressionContext context)
            {
                base.CopyFrom(context);
            }
        }
        public partial class TemplateStringExpressionContext : SingleExpressionContext
        {
            public SingleExpressionContext singleExpression()
            {
                return GetRuleContext<SingleExpressionContext>(0);
            }
            public ITerminalNode TemplateStringLiteral() { return GetToken(JavaScriptParser.TemplateStringLiteral, 0); }
            public TemplateStringExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterTemplateStringExpression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitTemplateStringExpression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitTemplateStringExpression(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class TernaryExpressionContext : SingleExpressionContext
        {
            public SingleExpressionContext[] singleExpression()
            {
                return GetRuleContexts<SingleExpressionContext>();
            }
            public SingleExpressionContext singleExpression(int i)
            {
                return GetRuleContext<SingleExpressionContext>(i);
            }
            public TernaryExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterTernaryExpression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitTernaryExpression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitTernaryExpression(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class LogicalAndExpressionContext : SingleExpressionContext
        {
            public SingleExpressionContext[] singleExpression()
            {
                return GetRuleContexts<SingleExpressionContext>();
            }
            public SingleExpressionContext singleExpression(int i)
            {
                return GetRuleContext<SingleExpressionContext>(i);
            }
            public LogicalAndExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterLogicalAndExpression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitLogicalAndExpression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitLogicalAndExpression(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class PreIncrementExpressionContext : SingleExpressionContext
        {
            public SingleExpressionContext singleExpression()
            {
                return GetRuleContext<SingleExpressionContext>(0);
            }
            public PreIncrementExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterPreIncrementExpression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitPreIncrementExpression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitPreIncrementExpression(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class ObjectLiteralExpressionContext : SingleExpressionContext
        {
            public ObjectLiteralContext objectLiteral()
            {
                return GetRuleContext<ObjectLiteralContext>(0);
            }
            public ObjectLiteralExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterObjectLiteralExpression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitObjectLiteralExpression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitObjectLiteralExpression(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class InExpressionContext : SingleExpressionContext
        {
            public SingleExpressionContext[] singleExpression()
            {
                return GetRuleContexts<SingleExpressionContext>();
            }
            public SingleExpressionContext singleExpression(int i)
            {
                return GetRuleContext<SingleExpressionContext>(i);
            }
            public ITerminalNode In() { return GetToken(JavaScriptParser.In, 0); }
            public InExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterInExpression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitInExpression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitInExpression(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class LogicalOrExpressionContext : SingleExpressionContext
        {
            public SingleExpressionContext[] singleExpression()
            {
                return GetRuleContexts<SingleExpressionContext>();
            }
            public SingleExpressionContext singleExpression(int i)
            {
                return GetRuleContext<SingleExpressionContext>(i);
            }
            public LogicalOrExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterLogicalOrExpression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitLogicalOrExpression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitLogicalOrExpression(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class NotExpressionContext : SingleExpressionContext
        {
            public SingleExpressionContext singleExpression()
            {
                return GetRuleContext<SingleExpressionContext>(0);
            }
            public NotExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterNotExpression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitNotExpression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class PreDecreaseExpressionContext : SingleExpressionContext
        {
            public SingleExpressionContext singleExpression()
            {
                return GetRuleContext<SingleExpressionContext>(0);
            }
            public PreDecreaseExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterPreDecreaseExpression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitPreDecreaseExpression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitPreDecreaseExpression(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class ArgumentsExpressionContext : SingleExpressionContext
        {
            public SingleExpressionContext singleExpression()
            {
                return GetRuleContext<SingleExpressionContext>(0);
            }
            public ArgumentsContext arguments()
            {
                return GetRuleContext<ArgumentsContext>(0);
            }
            public ArgumentsExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterArgumentsExpression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitArgumentsExpression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitArgumentsExpression(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class ThisExpressionContext : SingleExpressionContext
        {
            public ITerminalNode This() { return GetToken(JavaScriptParser.This, 0); }
            public ThisExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterThisExpression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitThisExpression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitThisExpression(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class FunctionExpressionContext : SingleExpressionContext
        {
            public ITerminalNode Function() { return GetToken(JavaScriptParser.Function, 0); }
            public FunctionBodyContext functionBody()
            {
                return GetRuleContext<FunctionBodyContext>(0);
            }
            public ITerminalNode Identifier() { return GetToken(JavaScriptParser.Identifier, 0); }
            public FormalParameterListContext formalParameterList()
            {
                return GetRuleContext<FormalParameterListContext>(0);
            }
            public FunctionExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterFunctionExpression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitFunctionExpression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitFunctionExpression(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class UnaryMinusExpressionContext : SingleExpressionContext
        {
            public SingleExpressionContext singleExpression()
            {
                return GetRuleContext<SingleExpressionContext>(0);
            }
            public UnaryMinusExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterUnaryMinusExpression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitUnaryMinusExpression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitUnaryMinusExpression(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class AssignmentExpressionContext : SingleExpressionContext
        {
            public SingleExpressionContext[] singleExpression()
            {
                return GetRuleContexts<SingleExpressionContext>();
            }
            public SingleExpressionContext singleExpression(int i)
            {
                return GetRuleContext<SingleExpressionContext>(i);
            }
            public AssignmentExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterAssignmentExpression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitAssignmentExpression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class PostDecreaseExpressionContext : SingleExpressionContext
        {
            public SingleExpressionContext singleExpression()
            {
                return GetRuleContext<SingleExpressionContext>(0);
            }
            public PostDecreaseExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterPostDecreaseExpression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitPostDecreaseExpression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitPostDecreaseExpression(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class TypeofExpressionContext : SingleExpressionContext
        {
            public ITerminalNode Typeof() { return GetToken(JavaScriptParser.Typeof, 0); }
            public SingleExpressionContext singleExpression()
            {
                return GetRuleContext<SingleExpressionContext>(0);
            }
            public TypeofExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterTypeofExpression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitTypeofExpression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitTypeofExpression(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class InstanceofExpressionContext : SingleExpressionContext
        {
            public SingleExpressionContext[] singleExpression()
            {
                return GetRuleContexts<SingleExpressionContext>();
            }
            public SingleExpressionContext singleExpression(int i)
            {
                return GetRuleContext<SingleExpressionContext>(i);
            }
            public ITerminalNode Instanceof() { return GetToken(JavaScriptParser.Instanceof, 0); }
            public InstanceofExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterInstanceofExpression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitInstanceofExpression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitInstanceofExpression(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class UnaryPlusExpressionContext : SingleExpressionContext
        {
            public SingleExpressionContext singleExpression()
            {
                return GetRuleContext<SingleExpressionContext>(0);
            }
            public UnaryPlusExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterUnaryPlusExpression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitUnaryPlusExpression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitUnaryPlusExpression(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class DeleteExpressionContext : SingleExpressionContext
        {
            public ITerminalNode Delete() { return GetToken(JavaScriptParser.Delete, 0); }
            public SingleExpressionContext singleExpression()
            {
                return GetRuleContext<SingleExpressionContext>(0);
            }
            public DeleteExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterDeleteExpression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitDeleteExpression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitDeleteExpression(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class ArrowFunctionExpressionContext : SingleExpressionContext
        {
            public ArrowFunctionParametersContext arrowFunctionParameters()
            {
                return GetRuleContext<ArrowFunctionParametersContext>(0);
            }
            public ArrowFunctionBodyContext arrowFunctionBody()
            {
                return GetRuleContext<ArrowFunctionBodyContext>(0);
            }
            public ArrowFunctionExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterArrowFunctionExpression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitArrowFunctionExpression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitArrowFunctionExpression(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class EqualityExpressionContext : SingleExpressionContext
        {
            public SingleExpressionContext[] singleExpression()
            {
                return GetRuleContexts<SingleExpressionContext>();
            }
            public SingleExpressionContext singleExpression(int i)
            {
                return GetRuleContext<SingleExpressionContext>(i);
            }
            public EqualityExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterEqualityExpression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitEqualityExpression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class BitXOrExpressionContext : SingleExpressionContext
        {
            public SingleExpressionContext[] singleExpression()
            {
                return GetRuleContexts<SingleExpressionContext>();
            }
            public SingleExpressionContext singleExpression(int i)
            {
                return GetRuleContext<SingleExpressionContext>(i);
            }
            public BitXOrExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterBitXOrExpression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitBitXOrExpression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitBitXOrExpression(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class SuperExpressionContext : SingleExpressionContext
        {
            public ITerminalNode Super() { return GetToken(JavaScriptParser.Super, 0); }
            public SuperExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterSuperExpression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitSuperExpression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitSuperExpression(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class MultiplicativeExpressionContext : SingleExpressionContext
        {
            public SingleExpressionContext[] singleExpression()
            {
                return GetRuleContexts<SingleExpressionContext>();
            }
            public SingleExpressionContext singleExpression(int i)
            {
                return GetRuleContext<SingleExpressionContext>(i);
            }
            public MultiplicativeExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class BitShiftExpressionContext : SingleExpressionContext
        {
            public SingleExpressionContext[] singleExpression()
            {
                return GetRuleContexts<SingleExpressionContext>();
            }
            public SingleExpressionContext singleExpression(int i)
            {
                return GetRuleContext<SingleExpressionContext>(i);
            }
            public BitShiftExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterBitShiftExpression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitBitShiftExpression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitBitShiftExpression(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class ParenthesizedExpressionContext : SingleExpressionContext
        {
            public ExpressionSequenceContext expressionSequence()
            {
                return GetRuleContext<ExpressionSequenceContext>(0);
            }
            public ParenthesizedExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterParenthesizedExpression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitParenthesizedExpression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class AdditiveExpressionContext : SingleExpressionContext
        {
            public SingleExpressionContext[] singleExpression()
            {
                return GetRuleContexts<SingleExpressionContext>();
            }
            public SingleExpressionContext singleExpression(int i)
            {
                return GetRuleContext<SingleExpressionContext>(i);
            }
            public AdditiveExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterAdditiveExpression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitAdditiveExpression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class RelationalExpressionContext : SingleExpressionContext
        {
            public SingleExpressionContext[] singleExpression()
            {
                return GetRuleContexts<SingleExpressionContext>();
            }
            public SingleExpressionContext singleExpression(int i)
            {
                return GetRuleContext<SingleExpressionContext>(i);
            }
            public RelationalExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterRelationalExpression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitRelationalExpression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class PostIncrementExpressionContext : SingleExpressionContext
        {
            public SingleExpressionContext singleExpression()
            {
                return GetRuleContext<SingleExpressionContext>(0);
            }
            public PostIncrementExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterPostIncrementExpression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitPostIncrementExpression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitPostIncrementExpression(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class BitNotExpressionContext : SingleExpressionContext
        {
            public SingleExpressionContext singleExpression()
            {
                return GetRuleContext<SingleExpressionContext>(0);
            }
            public BitNotExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterBitNotExpression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitBitNotExpression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitBitNotExpression(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class NewExpressionContext : SingleExpressionContext
        {
            public ITerminalNode New() { return GetToken(JavaScriptParser.New, 0); }
            public SingleExpressionContext singleExpression()
            {
                return GetRuleContext<SingleExpressionContext>(0);
            }
            public ArgumentsContext arguments()
            {
                return GetRuleContext<ArgumentsContext>(0);
            }
            public NewExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterNewExpression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitNewExpression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitNewExpression(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class LiteralExpressionContext : SingleExpressionContext
        {
            public LiteralContext literal()
            {
                return GetRuleContext<LiteralContext>(0);
            }
            public LiteralExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterLiteralExpression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitLiteralExpression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitLiteralExpression(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class ArrayLiteralExpressionContext : SingleExpressionContext
        {
            public ArrayLiteralContext arrayLiteral()
            {
                return GetRuleContext<ArrayLiteralContext>(0);
            }
            public ArrayLiteralExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterArrayLiteralExpression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitArrayLiteralExpression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitArrayLiteralExpression(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class MemberDotExpressionContext : SingleExpressionContext
        {
            public SingleExpressionContext singleExpression()
            {
                return GetRuleContext<SingleExpressionContext>(0);
            }
            public IdentifierNameContext identifierName()
            {
                return GetRuleContext<IdentifierNameContext>(0);
            }
            public MemberDotExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterMemberDotExpression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitMemberDotExpression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitMemberDotExpression(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class ClassExpressionContext : SingleExpressionContext
        {
            public ITerminalNode Class() { return GetToken(JavaScriptParser.Class, 0); }
            public ClassTailContext classTail()
            {
                return GetRuleContext<ClassTailContext>(0);
            }
            public ITerminalNode Identifier() { return GetToken(JavaScriptParser.Identifier, 0); }
            public ClassExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterClassExpression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitClassExpression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitClassExpression(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class MemberIndexExpressionContext : SingleExpressionContext
        {
            public SingleExpressionContext singleExpression()
            {
                return GetRuleContext<SingleExpressionContext>(0);
            }
            public ExpressionSequenceContext expressionSequence()
            {
                return GetRuleContext<ExpressionSequenceContext>(0);
            }
            public MemberIndexExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterMemberIndexExpression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitMemberIndexExpression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitMemberIndexExpression(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class IdentifierExpressionContext : SingleExpressionContext
        {
            public ITerminalNode Identifier() { return GetToken(JavaScriptParser.Identifier, 0); }
            public IdentifierExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterIdentifierExpression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitIdentifierExpression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class BitAndExpressionContext : SingleExpressionContext
        {
            public SingleExpressionContext[] singleExpression()
            {
                return GetRuleContexts<SingleExpressionContext>();
            }
            public SingleExpressionContext singleExpression(int i)
            {
                return GetRuleContext<SingleExpressionContext>(i);
            }
            public BitAndExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterBitAndExpression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitBitAndExpression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitBitAndExpression(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class BitOrExpressionContext : SingleExpressionContext
        {
            public SingleExpressionContext[] singleExpression()
            {
                return GetRuleContexts<SingleExpressionContext>();
            }
            public SingleExpressionContext singleExpression(int i)
            {
                return GetRuleContext<SingleExpressionContext>(i);
            }
            public BitOrExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterBitOrExpression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitBitOrExpression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitBitOrExpression(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class AssignmentOperatorExpressionContext : SingleExpressionContext
        {
            public SingleExpressionContext[] singleExpression()
            {
                return GetRuleContexts<SingleExpressionContext>();
            }
            public SingleExpressionContext singleExpression(int i)
            {
                return GetRuleContext<SingleExpressionContext>(i);
            }
            public AssignmentOperatorContext assignmentOperator()
            {
                return GetRuleContext<AssignmentOperatorContext>(0);
            }
            public AssignmentOperatorExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterAssignmentOperatorExpression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitAssignmentOperatorExpression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitAssignmentOperatorExpression(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VoidExpressionContext : SingleExpressionContext
        {
            public ITerminalNode Void() { return GetToken(JavaScriptParser.Void, 0); }
            public SingleExpressionContext singleExpression()
            {
                return GetRuleContext<SingleExpressionContext>(0);
            }
            public VoidExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterVoidExpression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitVoidExpression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVoidExpression(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public SingleExpressionContext singleExpression()
        {
            return singleExpression(0);
        }

        private SingleExpressionContext singleExpression(int _p)
        {
            ParserRuleContext _parentctx = Context;
            int _parentState = State;
            SingleExpressionContext _localctx = new SingleExpressionContext(Context, _parentState);
            SingleExpressionContext _prevctx = _localctx;
            int _startState = 96;
            EnterRecursionRule(_localctx, 96, RULE_singleExpression, _p);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 652;
                    ErrorHandler.Sync(this);
                    switch (Interpreter.AdaptivePredict(TokenStream, 65, Context))
                    {
                        case 1:
                            {
                                _localctx = new FunctionExpressionContext(_localctx);
                                Context = _localctx;
                                _prevctx = _localctx;

                                State = 597; Match(Function);
                                State = 599;
                                ErrorHandler.Sync(this);
                                _la = TokenStream.LA(1);
                                if (_la == Identifier)
                                {
                                    {
                                        State = 598; Match(Identifier);
                                    }
                                }

                                State = 601; Match(OpenParen);
                                State = 603;
                                ErrorHandler.Sync(this);
                                _la = TokenStream.LA(1);
                                if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenBrace) | (1L << Ellipsis))) != 0) || _la == Identifier)
                                {
                                    {
                                        State = 602; formalParameterList();
                                    }
                                }

                                State = 605; Match(CloseParen);
                                State = 606; Match(OpenBrace);
                                State = 607; functionBody();
                                State = 608; Match(CloseBrace);
                            }
                            break;
                        case 2:
                            {
                                _localctx = new ClassExpressionContext(_localctx);
                                Context = _localctx;
                                _prevctx = _localctx;
                                State = 610; Match(Class);
                                State = 612;
                                ErrorHandler.Sync(this);
                                _la = TokenStream.LA(1);
                                if (_la == Identifier)
                                {
                                    {
                                        State = 611; Match(Identifier);
                                    }
                                }

                                State = 614; classTail();
                            }
                            break;
                        case 3:
                            {
                                _localctx = new NewExpressionContext(_localctx);
                                Context = _localctx;
                                _prevctx = _localctx;
                                State = 615; Match(New);
                                State = 616; singleExpression(0);
                                State = 618;
                                ErrorHandler.Sync(this);
                                switch (Interpreter.AdaptivePredict(TokenStream, 64, Context))
                                {
                                    case 1:
                                        {
                                            State = 617; arguments();
                                        }
                                        break;
                                }
                            }
                            break;
                        case 4:
                            {
                                _localctx = new DeleteExpressionContext(_localctx);
                                Context = _localctx;
                                _prevctx = _localctx;
                                State = 620; Match(Delete);
                                State = 621; singleExpression(33);
                            }
                            break;
                        case 5:
                            {
                                _localctx = new VoidExpressionContext(_localctx);
                                Context = _localctx;
                                _prevctx = _localctx;
                                State = 622; Match(Void);
                                State = 623; singleExpression(32);
                            }
                            break;
                        case 6:
                            {
                                _localctx = new TypeofExpressionContext(_localctx);
                                Context = _localctx;
                                _prevctx = _localctx;
                                State = 624; Match(Typeof);
                                State = 625; singleExpression(31);
                            }
                            break;
                        case 7:
                            {
                                _localctx = new PreIncrementExpressionContext(_localctx);
                                Context = _localctx;
                                _prevctx = _localctx;
                                State = 626; Match(PlusPlus);
                                State = 627; singleExpression(30);
                            }
                            break;
                        case 8:
                            {
                                _localctx = new PreDecreaseExpressionContext(_localctx);
                                Context = _localctx;
                                _prevctx = _localctx;
                                State = 628; Match(MinusMinus);
                                State = 629; singleExpression(29);
                            }
                            break;
                        case 9:
                            {
                                _localctx = new UnaryPlusExpressionContext(_localctx);
                                Context = _localctx;
                                _prevctx = _localctx;
                                State = 630; Match(Plus);
                                State = 631; singleExpression(28);
                            }
                            break;
                        case 10:
                            {
                                _localctx = new UnaryMinusExpressionContext(_localctx);
                                Context = _localctx;
                                _prevctx = _localctx;
                                State = 632; Match(Minus);
                                State = 633; singleExpression(27);
                            }
                            break;
                        case 11:
                            {
                                _localctx = new BitNotExpressionContext(_localctx);
                                Context = _localctx;
                                _prevctx = _localctx;
                                State = 634; Match(BitNot);
                                State = 635; singleExpression(26);
                            }
                            break;
                        case 12:
                            {
                                _localctx = new NotExpressionContext(_localctx);
                                Context = _localctx;
                                _prevctx = _localctx;
                                State = 636; Match(Not);
                                State = 637; singleExpression(25);
                            }
                            break;
                        case 13:
                            {
                                _localctx = new ThisExpressionContext(_localctx);
                                Context = _localctx;
                                _prevctx = _localctx;
                                State = 638; Match(This);
                            }
                            break;
                        case 14:
                            {
                                _localctx = new IdentifierExpressionContext(_localctx);
                                Context = _localctx;
                                _prevctx = _localctx;
                                State = 639; Match(Identifier);
                            }
                            break;
                        case 15:
                            {
                                _localctx = new SuperExpressionContext(_localctx);
                                Context = _localctx;
                                _prevctx = _localctx;
                                State = 640; Match(Super);
                            }
                            break;
                        case 16:
                            {
                                _localctx = new LiteralExpressionContext(_localctx);
                                Context = _localctx;
                                _prevctx = _localctx;
                                State = 641; literal();
                            }
                            break;
                        case 17:
                            {
                                _localctx = new ArrayLiteralExpressionContext(_localctx);
                                Context = _localctx;
                                _prevctx = _localctx;
                                State = 642; arrayLiteral();
                            }
                            break;
                        case 18:
                            {
                                _localctx = new ObjectLiteralExpressionContext(_localctx);
                                Context = _localctx;
                                _prevctx = _localctx;
                                State = 643; objectLiteral();
                            }
                            break;
                        case 19:
                            {
                                _localctx = new ParenthesizedExpressionContext(_localctx);
                                Context = _localctx;
                                _prevctx = _localctx;
                                State = 644; Match(OpenParen);
                                State = 645; expressionSequence();
                                State = 646; Match(CloseParen);
                            }
                            break;
                        case 20:
                            {
                                _localctx = new ArrowFunctionExpressionContext(_localctx);
                                Context = _localctx;
                                _prevctx = _localctx;
                                State = 648; arrowFunctionParameters();
                                State = 649; Match(ARROW);
                                State = 650; arrowFunctionBody();
                            }
                            break;
                    }
                    Context.Stop = TokenStream.LT(-1);
                    State = 723;
                    ErrorHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(TokenStream, 67, Context);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
                    {
                        if (_alt == 1)
                        {
                            if (ParseListeners != null)
                                TriggerExitRuleEvent();
                            _prevctx = _localctx;
                            {
                                State = 721;
                                ErrorHandler.Sync(this);
                                switch (Interpreter.AdaptivePredict(TokenStream, 66, Context))
                                {
                                    case 1:
                                        {
                                            _localctx = new MultiplicativeExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
                                            State = 654;
                                            if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
                                            State = 655;
                                            _la = TokenStream.LA(1);
                                            if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Multiply) | (1L << Divide) | (1L << Modulus))) != 0)))
                                            {
                                                ErrorHandler.RecoverInline(this);
                                            }
                                            else
                                            {
                                                ErrorHandler.ReportMatch(this);
                                                Consume();
                                            }
                                            State = 656; singleExpression(25);
                                        }
                                        break;
                                    case 2:
                                        {
                                            _localctx = new AdditiveExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
                                            State = 657;
                                            if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
                                            State = 658;
                                            _la = TokenStream.LA(1);
                                            if (!(_la == Plus || _la == Minus))
                                            {
                                                ErrorHandler.RecoverInline(this);
                                            }
                                            else
                                            {
                                                ErrorHandler.ReportMatch(this);
                                                Consume();
                                            }
                                            State = 659; singleExpression(24);
                                        }
                                        break;
                                    case 3:
                                        {
                                            _localctx = new BitShiftExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
                                            State = 660;
                                            if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
                                            State = 661;
                                            _la = TokenStream.LA(1);
                                            if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RightShiftArithmetic) | (1L << LeftShiftArithmetic) | (1L << RightShiftLogical))) != 0)))
                                            {
                                                ErrorHandler.RecoverInline(this);
                                            }
                                            else
                                            {
                                                ErrorHandler.ReportMatch(this);
                                                Consume();
                                            }
                                            State = 662; singleExpression(23);
                                        }
                                        break;
                                    case 4:
                                        {
                                            _localctx = new RelationalExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
                                            State = 663;
                                            if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
                                            State = 664;
                                            _la = TokenStream.LA(1);
                                            if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LessThan) | (1L << MoreThan) | (1L << LessThanEquals) | (1L << GreaterThanEquals))) != 0)))
                                            {
                                                ErrorHandler.RecoverInline(this);
                                            }
                                            else
                                            {
                                                ErrorHandler.ReportMatch(this);
                                                Consume();
                                            }
                                            State = 665; singleExpression(22);
                                        }
                                        break;
                                    case 5:
                                        {
                                            _localctx = new InstanceofExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
                                            State = 666;
                                            if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
                                            State = 667; Match(Instanceof);
                                            State = 668; singleExpression(21);
                                        }
                                        break;
                                    case 6:
                                        {
                                            _localctx = new InExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
                                            State = 669;
                                            if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
                                            State = 670; Match(In);
                                            State = 671; singleExpression(20);
                                        }
                                        break;
                                    case 7:
                                        {
                                            _localctx = new EqualityExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
                                            State = 672;
                                            if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
                                            State = 673;
                                            _la = TokenStream.LA(1);
                                            if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Equals_) | (1L << NotEquals) | (1L << IdentityEquals) | (1L << IdentityNotEquals))) != 0)))
                                            {
                                                ErrorHandler.RecoverInline(this);
                                            }
                                            else
                                            {
                                                ErrorHandler.ReportMatch(this);
                                                Consume();
                                            }
                                            State = 674; singleExpression(19);
                                        }
                                        break;
                                    case 8:
                                        {
                                            _localctx = new BitAndExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
                                            State = 675;
                                            if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
                                            State = 676; Match(BitAnd);
                                            State = 677; singleExpression(18);
                                        }
                                        break;
                                    case 9:
                                        {
                                            _localctx = new BitXOrExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
                                            State = 678;
                                            if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
                                            State = 679; Match(BitXOr);
                                            State = 680; singleExpression(17);
                                        }
                                        break;
                                    case 10:
                                        {
                                            _localctx = new BitOrExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
                                            State = 681;
                                            if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
                                            State = 682; Match(BitOr);
                                            State = 683; singleExpression(16);
                                        }
                                        break;
                                    case 11:
                                        {
                                            _localctx = new LogicalAndExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
                                            State = 684;
                                            if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
                                            State = 685; Match(And);
                                            State = 686; singleExpression(15);
                                        }
                                        break;
                                    case 12:
                                        {
                                            _localctx = new LogicalOrExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
                                            State = 687;
                                            if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
                                            State = 688; Match(Or);
                                            State = 689; singleExpression(14);
                                        }
                                        break;
                                    case 13:
                                        {
                                            _localctx = new TernaryExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
                                            State = 690;
                                            if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
                                            State = 691; Match(QuestionMark);
                                            State = 692; singleExpression(0);
                                            State = 693; Match(Colon);
                                            State = 694; singleExpression(13);
                                        }
                                        break;
                                    case 14:
                                        {
                                            _localctx = new AssignmentExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
                                            State = 696;
                                            if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
                                            State = 697; Match(Assign);
                                            State = 698; singleExpression(12);
                                        }
                                        break;
                                    case 15:
                                        {
                                            _localctx = new AssignmentOperatorExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
                                            State = 699;
                                            if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
                                            State = 700; assignmentOperator();
                                            State = 701; singleExpression(11);
                                        }
                                        break;
                                    case 16:
                                        {
                                            _localctx = new MemberIndexExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
                                            State = 703;
                                            if (!(Precpred(Context, 39))) throw new FailedPredicateException(this, "Precpred(Context, 39)");
                                            State = 704; Match(OpenBracket);
                                            State = 705; expressionSequence();
                                            State = 706; Match(CloseBracket);
                                        }
                                        break;
                                    case 17:
                                        {
                                            _localctx = new MemberDotExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
                                            State = 708;
                                            if (!(Precpred(Context, 38))) throw new FailedPredicateException(this, "Precpred(Context, 38)");
                                            State = 709; Match(Dot);
                                            State = 710; identifierName();
                                        }
                                        break;
                                    case 18:
                                        {
                                            _localctx = new ArgumentsExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
                                            State = 711;
                                            if (!(Precpred(Context, 37))) throw new FailedPredicateException(this, "Precpred(Context, 37)");
                                            State = 712; arguments();
                                        }
                                        break;
                                    case 19:
                                        {
                                            _localctx = new PostIncrementExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
                                            State = 713;
                                            if (!(Precpred(Context, 35))) throw new FailedPredicateException(this, "Precpred(Context, 35)");
                                            State = 714;
                                            if (!(notLineTerminator())) throw new FailedPredicateException(this, "notLineTerminator()");
                                            State = 715; Match(PlusPlus);
                                        }
                                        break;
                                    case 20:
                                        {
                                            _localctx = new PostDecreaseExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
                                            State = 716;
                                            if (!(Precpred(Context, 34))) throw new FailedPredicateException(this, "Precpred(Context, 34)");
                                            State = 717;
                                            if (!(notLineTerminator())) throw new FailedPredicateException(this, "notLineTerminator()");
                                            State = 718; Match(MinusMinus);
                                        }
                                        break;
                                    case 21:
                                        {
                                            _localctx = new TemplateStringExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
                                            State = 719;
                                            if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
                                            State = 720; Match(TemplateStringLiteral);
                                        }
                                        break;
                                }
                            }
                        }
                        State = 725;
                        ErrorHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(TokenStream, 67, Context);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                UnrollRecursionContexts(_parentctx);
            }
            return _localctx;
        }

        public partial class ArrowFunctionParametersContext : ParserRuleContext
        {
            public ITerminalNode Identifier() { return GetToken(JavaScriptParser.Identifier, 0); }
            public FormalParameterListContext formalParameterList()
            {
                return GetRuleContext<FormalParameterListContext>(0);
            }
            public ArrowFunctionParametersContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_arrowFunctionParameters; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterArrowFunctionParameters(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitArrowFunctionParameters(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitArrowFunctionParameters(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ArrowFunctionParametersContext arrowFunctionParameters()
        {
            ArrowFunctionParametersContext _localctx = new ArrowFunctionParametersContext(Context, State);
            EnterRule(_localctx, 98, RULE_arrowFunctionParameters);
            int _la;
            try
            {
                State = 732;
                ErrorHandler.Sync(this);
                switch (TokenStream.LA(1))
                {
                    case Identifier:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 726; Match(Identifier);
                        }
                        break;
                    case OpenParen:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 727; Match(OpenParen);
                            State = 729;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                            if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenBrace) | (1L << Ellipsis))) != 0) || _la == Identifier)
                            {
                                {
                                    State = 728; formalParameterList();
                                }
                            }

                            State = 731; Match(CloseParen);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ArrowFunctionBodyContext : ParserRuleContext
        {
            public SingleExpressionContext singleExpression()
            {
                return GetRuleContext<SingleExpressionContext>(0);
            }
            public FunctionBodyContext functionBody()
            {
                return GetRuleContext<FunctionBodyContext>(0);
            }
            public ArrowFunctionBodyContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_arrowFunctionBody; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterArrowFunctionBody(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitArrowFunctionBody(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitArrowFunctionBody(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ArrowFunctionBodyContext arrowFunctionBody()
        {
            ArrowFunctionBodyContext _localctx = new ArrowFunctionBodyContext(Context, State);
            EnterRule(_localctx, 100, RULE_arrowFunctionBody);
            try
            {
                State = 739;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 70, Context))
                {
                    case 1:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 734; singleExpression(0);
                        }
                        break;
                    case 2:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 735; Match(OpenBrace);
                            State = 736; functionBody();
                            State = 737; Match(CloseBrace);
                        }
                        break;
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class AssignmentOperatorContext : ParserRuleContext
        {
            public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_assignmentOperator; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterAssignmentOperator(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitAssignmentOperator(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitAssignmentOperator(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public AssignmentOperatorContext assignmentOperator()
        {
            AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
            EnterRule(_localctx, 102, RULE_assignmentOperator);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 741;
                    _la = TokenStream.LA(1);
                    if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MultiplyAssign) | (1L << DivideAssign) | (1L << ModulusAssign) | (1L << PlusAssign) | (1L << MinusAssign) | (1L << LeftShiftArithmeticAssign) | (1L << RightShiftArithmeticAssign) | (1L << RightShiftLogicalAssign) | (1L << BitAndAssign) | (1L << BitXorAssign) | (1L << BitOrAssign))) != 0)))
                    {
                        ErrorHandler.RecoverInline(this);
                    }
                    else
                    {
                        ErrorHandler.ReportMatch(this);
                        Consume();
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class LiteralContext : ParserRuleContext
        {
            public ITerminalNode NullLiteral() { return GetToken(JavaScriptParser.NullLiteral, 0); }
            public ITerminalNode BooleanLiteral() { return GetToken(JavaScriptParser.BooleanLiteral, 0); }
            public ITerminalNode StringLiteral() { return GetToken(JavaScriptParser.StringLiteral, 0); }
            public ITerminalNode TemplateStringLiteral() { return GetToken(JavaScriptParser.TemplateStringLiteral, 0); }
            public ITerminalNode RegularExpressionLiteral() { return GetToken(JavaScriptParser.RegularExpressionLiteral, 0); }
            public NumericLiteralContext numericLiteral()
            {
                return GetRuleContext<NumericLiteralContext>(0);
            }
            public LiteralContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_literal; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterLiteral(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitLiteral(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public LiteralContext literal()
        {
            LiteralContext _localctx = new LiteralContext(Context, State);
            EnterRule(_localctx, 104, RULE_literal);
            try
            {
                State = 749;
                ErrorHandler.Sync(this);
                switch (TokenStream.LA(1))
                {
                    case NullLiteral:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 743; Match(NullLiteral);
                        }
                        break;
                    case BooleanLiteral:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 744; Match(BooleanLiteral);
                        }
                        break;
                    case StringLiteral:
                        EnterOuterAlt(_localctx, 3);
                        {
                            State = 745; Match(StringLiteral);
                        }
                        break;
                    case TemplateStringLiteral:
                        EnterOuterAlt(_localctx, 4);
                        {
                            State = 746; Match(TemplateStringLiteral);
                        }
                        break;
                    case RegularExpressionLiteral:
                        EnterOuterAlt(_localctx, 5);
                        {
                            State = 747; Match(RegularExpressionLiteral);
                        }
                        break;
                    case DecimalLiteral:
                    case HexIntegerLiteral:
                    case OctalIntegerLiteral:
                    case OctalIntegerLiteral2:
                    case BinaryIntegerLiteral:
                        EnterOuterAlt(_localctx, 6);
                        {
                            State = 748; numericLiteral();
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class NumericLiteralContext : ParserRuleContext
        {
            public ITerminalNode DecimalLiteral() { return GetToken(JavaScriptParser.DecimalLiteral, 0); }
            public ITerminalNode HexIntegerLiteral() { return GetToken(JavaScriptParser.HexIntegerLiteral, 0); }
            public ITerminalNode OctalIntegerLiteral() { return GetToken(JavaScriptParser.OctalIntegerLiteral, 0); }
            public ITerminalNode OctalIntegerLiteral2() { return GetToken(JavaScriptParser.OctalIntegerLiteral2, 0); }
            public ITerminalNode BinaryIntegerLiteral() { return GetToken(JavaScriptParser.BinaryIntegerLiteral, 0); }
            public NumericLiteralContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_numericLiteral; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterNumericLiteral(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitNumericLiteral(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitNumericLiteral(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public NumericLiteralContext numericLiteral()
        {
            NumericLiteralContext _localctx = new NumericLiteralContext(Context, State);
            EnterRule(_localctx, 106, RULE_numericLiteral);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 751;
                    _la = TokenStream.LA(1);
                    if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DecimalLiteral) | (1L << HexIntegerLiteral) | (1L << OctalIntegerLiteral) | (1L << OctalIntegerLiteral2) | (1L << BinaryIntegerLiteral))) != 0)))
                    {
                        ErrorHandler.RecoverInline(this);
                    }
                    else
                    {
                        ErrorHandler.ReportMatch(this);
                        Consume();
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class IdentifierNameContext : ParserRuleContext
        {
            public ITerminalNode Identifier() { return GetToken(JavaScriptParser.Identifier, 0); }
            public ReservedWordContext reservedWord()
            {
                return GetRuleContext<ReservedWordContext>(0);
            }
            public IdentifierNameContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_identifierName; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterIdentifierName(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitIdentifierName(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitIdentifierName(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public IdentifierNameContext identifierName()
        {
            IdentifierNameContext _localctx = new IdentifierNameContext(Context, State);
            EnterRule(_localctx, 108, RULE_identifierName);
            try
            {
                State = 755;
                ErrorHandler.Sync(this);
                switch (TokenStream.LA(1))
                {
                    case Identifier:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 753; Match(Identifier);
                        }
                        break;
                    case NullLiteral:
                    case BooleanLiteral:
                    case Break:
                    case Do:
                    case Instanceof:
                    case Typeof:
                    case Case:
                    case Else:
                    case New:
                    case Var:
                    case Catch:
                    case Finally:
                    case Return:
                    case Void:
                    case Continue:
                    case For:
                    case Switch:
                    case While:
                    case Debugger:
                    case Function:
                    case This:
                    case With:
                    case Default:
                    case If:
                    case Throw:
                    case Delete:
                    case In:
                    case Try:
                    case Class:
                    case Enum:
                    case Extends:
                    case Super:
                    case Const:
                    case Export:
                    case Import:
                    case Implements:
                    case Let:
                    case Private:
                    case Public:
                    case Interface:
                    case Package:
                    case Protected:
                    case Static:
                    case Yield:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 754; reservedWord();
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ReservedWordContext : ParserRuleContext
        {
            public KeywordContext keyword()
            {
                return GetRuleContext<KeywordContext>(0);
            }
            public ITerminalNode NullLiteral() { return GetToken(JavaScriptParser.NullLiteral, 0); }
            public ITerminalNode BooleanLiteral() { return GetToken(JavaScriptParser.BooleanLiteral, 0); }
            public ReservedWordContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_reservedWord; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterReservedWord(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitReservedWord(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitReservedWord(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ReservedWordContext reservedWord()
        {
            ReservedWordContext _localctx = new ReservedWordContext(Context, State);
            EnterRule(_localctx, 110, RULE_reservedWord);
            try
            {
                State = 760;
                ErrorHandler.Sync(this);
                switch (TokenStream.LA(1))
                {
                    case Break:
                    case Do:
                    case Instanceof:
                    case Typeof:
                    case Case:
                    case Else:
                    case New:
                    case Var:
                    case Catch:
                    case Finally:
                    case Return:
                    case Void:
                    case Continue:
                    case For:
                    case Switch:
                    case While:
                    case Debugger:
                    case Function:
                    case This:
                    case With:
                    case Default:
                    case If:
                    case Throw:
                    case Delete:
                    case In:
                    case Try:
                    case Class:
                    case Enum:
                    case Extends:
                    case Super:
                    case Const:
                    case Export:
                    case Import:
                    case Implements:
                    case Let:
                    case Private:
                    case Public:
                    case Interface:
                    case Package:
                    case Protected:
                    case Static:
                    case Yield:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 757; keyword();
                        }
                        break;
                    case NullLiteral:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 758; Match(NullLiteral);
                        }
                        break;
                    case BooleanLiteral:
                        EnterOuterAlt(_localctx, 3);
                        {
                            State = 759; Match(BooleanLiteral);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class KeywordContext : ParserRuleContext
        {
            public ITerminalNode Break() { return GetToken(JavaScriptParser.Break, 0); }
            public ITerminalNode Do() { return GetToken(JavaScriptParser.Do, 0); }
            public ITerminalNode Instanceof() { return GetToken(JavaScriptParser.Instanceof, 0); }
            public ITerminalNode Typeof() { return GetToken(JavaScriptParser.Typeof, 0); }
            public ITerminalNode Case() { return GetToken(JavaScriptParser.Case, 0); }
            public ITerminalNode Else() { return GetToken(JavaScriptParser.Else, 0); }
            public ITerminalNode New() { return GetToken(JavaScriptParser.New, 0); }
            public ITerminalNode Var() { return GetToken(JavaScriptParser.Var, 0); }
            public ITerminalNode Catch() { return GetToken(JavaScriptParser.Catch, 0); }
            public ITerminalNode Finally() { return GetToken(JavaScriptParser.Finally, 0); }
            public ITerminalNode Return() { return GetToken(JavaScriptParser.Return, 0); }
            public ITerminalNode Void() { return GetToken(JavaScriptParser.Void, 0); }
            public ITerminalNode Continue() { return GetToken(JavaScriptParser.Continue, 0); }
            public ITerminalNode For() { return GetToken(JavaScriptParser.For, 0); }
            public ITerminalNode Switch() { return GetToken(JavaScriptParser.Switch, 0); }
            public ITerminalNode While() { return GetToken(JavaScriptParser.While, 0); }
            public ITerminalNode Debugger() { return GetToken(JavaScriptParser.Debugger, 0); }
            public ITerminalNode Function() { return GetToken(JavaScriptParser.Function, 0); }
            public ITerminalNode This() { return GetToken(JavaScriptParser.This, 0); }
            public ITerminalNode With() { return GetToken(JavaScriptParser.With, 0); }
            public ITerminalNode Default() { return GetToken(JavaScriptParser.Default, 0); }
            public ITerminalNode If() { return GetToken(JavaScriptParser.If, 0); }
            public ITerminalNode Throw() { return GetToken(JavaScriptParser.Throw, 0); }
            public ITerminalNode Delete() { return GetToken(JavaScriptParser.Delete, 0); }
            public ITerminalNode In() { return GetToken(JavaScriptParser.In, 0); }
            public ITerminalNode Try() { return GetToken(JavaScriptParser.Try, 0); }
            public ITerminalNode Class() { return GetToken(JavaScriptParser.Class, 0); }
            public ITerminalNode Enum() { return GetToken(JavaScriptParser.Enum, 0); }
            public ITerminalNode Extends() { return GetToken(JavaScriptParser.Extends, 0); }
            public ITerminalNode Super() { return GetToken(JavaScriptParser.Super, 0); }
            public ITerminalNode Const() { return GetToken(JavaScriptParser.Const, 0); }
            public ITerminalNode Export() { return GetToken(JavaScriptParser.Export, 0); }
            public ITerminalNode Import() { return GetToken(JavaScriptParser.Import, 0); }
            public ITerminalNode Implements() { return GetToken(JavaScriptParser.Implements, 0); }
            public ITerminalNode Let() { return GetToken(JavaScriptParser.Let, 0); }
            public ITerminalNode Private() { return GetToken(JavaScriptParser.Private, 0); }
            public ITerminalNode Public() { return GetToken(JavaScriptParser.Public, 0); }
            public ITerminalNode Interface() { return GetToken(JavaScriptParser.Interface, 0); }
            public ITerminalNode Package() { return GetToken(JavaScriptParser.Package, 0); }
            public ITerminalNode Protected() { return GetToken(JavaScriptParser.Protected, 0); }
            public ITerminalNode Static() { return GetToken(JavaScriptParser.Static, 0); }
            public ITerminalNode Yield() { return GetToken(JavaScriptParser.Yield, 0); }
            public KeywordContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_keyword; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterKeyword(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitKeyword(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitKeyword(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public KeywordContext keyword()
        {
            KeywordContext _localctx = new KeywordContext(Context, State);
            EnterRule(_localctx, 112, RULE_keyword);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 762;
                    _la = TokenStream.LA(1);
                    if (!(((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & ((1L << (Break - 61)) | (1L << (Do - 61)) | (1L << (Instanceof - 61)) | (1L << (Typeof - 61)) | (1L << (Case - 61)) | (1L << (Else - 61)) | (1L << (New - 61)) | (1L << (Var - 61)) | (1L << (Catch - 61)) | (1L << (Finally - 61)) | (1L << (Return - 61)) | (1L << (Void - 61)) | (1L << (Continue - 61)) | (1L << (For - 61)) | (1L << (Switch - 61)) | (1L << (While - 61)) | (1L << (Debugger - 61)) | (1L << (Function - 61)) | (1L << (This - 61)) | (1L << (With - 61)) | (1L << (Default - 61)) | (1L << (If - 61)) | (1L << (Throw - 61)) | (1L << (Delete - 61)) | (1L << (In - 61)) | (1L << (Try - 61)) | (1L << (Class - 61)) | (1L << (Enum - 61)) | (1L << (Extends - 61)) | (1L << (Super - 61)) | (1L << (Const - 61)) | (1L << (Export - 61)) | (1L << (Import - 61)) | (1L << (Implements - 61)) | (1L << (Let - 61)) | (1L << (Private - 61)) | (1L << (Public - 61)) | (1L << (Interface - 61)) | (1L << (Package - 61)) | (1L << (Protected - 61)) | (1L << (Static - 61)) | (1L << (Yield - 61)))) != 0)))
                    {
                        ErrorHandler.RecoverInline(this);
                    }
                    else
                    {
                        ErrorHandler.ReportMatch(this);
                        Consume();
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class GetterContext : ParserRuleContext
        {
            public ITerminalNode Identifier() { return GetToken(JavaScriptParser.Identifier, 0); }
            public PropertyNameContext propertyName()
            {
                return GetRuleContext<PropertyNameContext>(0);
            }
            public GetterContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_getter; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterGetter(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitGetter(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitGetter(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public GetterContext getter()
        {
            GetterContext _localctx = new GetterContext(Context, State);
            EnterRule(_localctx, 114, RULE_getter);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 764; Match(Identifier);
                    State = 765;
                    if (!(p("get"))) throw new FailedPredicateException(this, "p(\"get\")");
                    State = 766; propertyName();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class SetterContext : ParserRuleContext
        {
            public ITerminalNode Identifier() { return GetToken(JavaScriptParser.Identifier, 0); }
            public PropertyNameContext propertyName()
            {
                return GetRuleContext<PropertyNameContext>(0);
            }
            public SetterContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_setter; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterSetter(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitSetter(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitSetter(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public SetterContext setter()
        {
            SetterContext _localctx = new SetterContext(Context, State);
            EnterRule(_localctx, 116, RULE_setter);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 768; Match(Identifier);
                    State = 769;
                    if (!(p("set"))) throw new FailedPredicateException(this, "p(\"set\")");
                    State = 770; propertyName();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class EosContext : ParserRuleContext
        {
            public ITerminalNode SemiColon() { return GetToken(JavaScriptParser.SemiColon, 0); }
            public ITerminalNode Eof() { return GetToken(JavaScriptParser.Eof, 0); }
            public EosContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_eos; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.EnterEos(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
                if (typedListener != null) typedListener.ExitEos(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IJavaScriptParserVisitor<TResult> typedVisitor = visitor as IJavaScriptParserVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitEos(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public EosContext eos()
        {
            EosContext _localctx = new EosContext(Context, State);
            EnterRule(_localctx, 118, RULE_eos);
            try
            {
                State = 776;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 74, Context))
                {
                    case 1:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 772; Match(SemiColon);
                        }
                        break;
                    case 2:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 773; Match(Eof);
                        }
                        break;
                    case 3:
                        EnterOuterAlt(_localctx, 3);
                        {
                            State = 774;
                            if (!(lineTerminatorAhead())) throw new FailedPredicateException(this, "lineTerminatorAhead()");
                        }
                        break;
                    case 4:
                        EnterOuterAlt(_localctx, 4);
                        {
                            State = 775;
                            if (!(closeBrace())) throw new FailedPredicateException(this, "closeBrace()");
                        }
                        break;
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex)
        {
            switch (ruleIndex)
            {
                case 9: return expressionStatement_sempred((ExpressionStatementContext)_localctx, predIndex);
                case 11: return iterationStatement_sempred((IterationStatementContext)_localctx, predIndex);
                case 13: return continueStatement_sempred((ContinueStatementContext)_localctx, predIndex);
                case 14: return breakStatement_sempred((BreakStatementContext)_localctx, predIndex);
                case 15: return returnStatement_sempred((ReturnStatementContext)_localctx, predIndex);
                case 23: return throwStatement_sempred((ThrowStatementContext)_localctx, predIndex);
                case 31: return classElement_sempred((ClassElementContext)_localctx, predIndex);
                case 48: return singleExpression_sempred((SingleExpressionContext)_localctx, predIndex);
                case 57: return getter_sempred((GetterContext)_localctx, predIndex);
                case 58: return setter_sempred((SetterContext)_localctx, predIndex);
                case 59: return eos_sempred((EosContext)_localctx, predIndex);
            }
            return true;
        }
        private bool expressionStatement_sempred(ExpressionStatementContext _localctx, int predIndex)
        {
            switch (predIndex)
            {
                case 0: return notOpenBraceAndNotFunction();
            }
            return true;
        }
        private bool iterationStatement_sempred(IterationStatementContext _localctx, int predIndex)
        {
            switch (predIndex)
            {
                case 1: return p("of");
                case 2: return p("of");
            }
            return true;
        }
        private bool continueStatement_sempred(ContinueStatementContext _localctx, int predIndex)
        {
            switch (predIndex)
            {
                case 3: return notLineTerminator();
            }
            return true;
        }
        private bool breakStatement_sempred(BreakStatementContext _localctx, int predIndex)
        {
            switch (predIndex)
            {
                case 4: return notLineTerminator();
            }
            return true;
        }
        private bool returnStatement_sempred(ReturnStatementContext _localctx, int predIndex)
        {
            switch (predIndex)
            {
                case 5: return notLineTerminator();
            }
            return true;
        }
        private bool throwStatement_sempred(ThrowStatementContext _localctx, int predIndex)
        {
            switch (predIndex)
            {
                case 6: return notLineTerminator();
            }
            return true;
        }
        private bool classElement_sempred(ClassElementContext _localctx, int predIndex)
        {
            switch (predIndex)
            {
                case 7: return n("static");
            }
            return true;
        }
        private bool singleExpression_sempred(SingleExpressionContext _localctx, int predIndex)
        {
            switch (predIndex)
            {
                case 8: return Precpred(Context, 24);
                case 9: return Precpred(Context, 23);
                case 10: return Precpred(Context, 22);
                case 11: return Precpred(Context, 21);
                case 12: return Precpred(Context, 20);
                case 13: return Precpred(Context, 19);
                case 14: return Precpred(Context, 18);
                case 15: return Precpred(Context, 17);
                case 16: return Precpred(Context, 16);
                case 17: return Precpred(Context, 15);
                case 18: return Precpred(Context, 14);
                case 19: return Precpred(Context, 13);
                case 20: return Precpred(Context, 12);
                case 21: return Precpred(Context, 11);
                case 22: return Precpred(Context, 10);
                case 23: return Precpred(Context, 39);
                case 24: return Precpred(Context, 38);
                case 25: return Precpred(Context, 37);
                case 26: return Precpred(Context, 35);
                case 27: return notLineTerminator();
                case 28: return Precpred(Context, 34);
                case 29: return notLineTerminator();
                case 30: return Precpred(Context, 9);
            }
            return true;
        }
        private bool getter_sempred(GetterContext _localctx, int predIndex)
        {
            switch (predIndex)
            {
                case 31: return p("get");
            }
            return true;
        }
        private bool setter_sempred(SetterContext _localctx, int predIndex)
        {
            switch (predIndex)
            {
                case 32: return p("set");
            }
            return true;
        }
        private bool eos_sempred(EosContext _localctx, int predIndex)
        {
            switch (predIndex)
            {
                case 33: return lineTerminatorAhead();
                case 34: return closeBrace();
            }
            return true;
        }

        private static char[] _serializedATN = {
        '\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786',
        '\x5964', '\x3', 'p', '\x30D', '\x4', '\x2', '\t', '\x2', '\x4', '\x3',
        '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4',
        '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b',
        '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v',
        '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t',
        '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4',
        '\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t',
        '\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4',
        '\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t',
        '\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4',
        '\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t',
        '\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4',
        ' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4',
        '#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&',
        '\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')',
        '\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t',
        ',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/',
        '\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32',
        '\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34',
        '\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37',
        '\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39',
        '\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4',
        '=', '\t', '=', '\x3', '\x2', '\x5', '\x2', '|', '\n', '\x2', '\x3', '\x2',
        '\x3', '\x2', '\x3', '\x3', '\x5', '\x3', '\x81', '\n', '\x3', '\x3',
        '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3',
        '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3',
        '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3',
        '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x96',
        '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x9A', '\n', '\x5',
        '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x6', '\x6', '\x9F', '\n',
        '\x6', '\r', '\x6', '\xE', '\x6', '\xA0', '\x3', '\a', '\x3', '\a', '\x3',
        '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b',
        '\xAA', '\n', '\b', '\f', '\b', '\xE', '\b', '\xAD', '\v', '\b', '\x3',
        '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\xB2', '\n', '\t', '\x3',
        '\t', '\x3', '\t', '\x5', '\t', '\xB6', '\n', '\t', '\x3', '\n', '\x3',
        '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f',
        '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3',
        '\f', '\x5', '\f', '\xC5', '\n', '\f', '\x3', '\r', '\x3', '\r', '\x3',
        '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r',
        '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3',
        '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\xD8', '\n',
        '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\xDC', '\n', '\r', '\x3',
        '\r', '\x3', '\r', '\x5', '\r', '\xE0', '\n', '\r', '\x3', '\r', '\x3',
        '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r',
        '\x3', '\r', '\x5', '\r', '\xEA', '\n', '\r', '\x3', '\r', '\x3', '\r',
        '\x5', '\r', '\xEE', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r',
        '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3',
        '\r', '\x5', '\r', '\xF9', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x3',
        '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r',
        '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\x106', '\n', '\r',
        '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\x10C',
        '\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3',
        '\xF', '\x5', '\xF', '\x113', '\n', '\xF', '\x3', '\xF', '\x3', '\xF',
        '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x11A', '\n',
        '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3',
        '\x11', '\x5', '\x11', '\x121', '\n', '\x11', '\x3', '\x11', '\x3', '\x11',
        '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12',
        '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13',
        '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14',
        '\x133', '\n', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\x137',
        '\n', '\x14', '\x5', '\x14', '\x139', '\n', '\x14', '\x3', '\x14', '\x3',
        '\x14', '\x3', '\x15', '\x6', '\x15', '\x13E', '\n', '\x15', '\r', '\x15',
        '\xE', '\x15', '\x13F', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3',
        '\x16', '\x5', '\x16', '\x146', '\n', '\x16', '\x3', '\x17', '\x3', '\x17',
        '\x3', '\x17', '\x5', '\x17', '\x14B', '\n', '\x17', '\x3', '\x18', '\x3',
        '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3',
        '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3',
        '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x15A', '\n', '\x1A', '\x3', '\x1A',
        '\x5', '\x1A', '\x15D', '\n', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3',
        '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3',
        '\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3',
        '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x16F',
        '\n', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E',
        '\x3', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F',
        '\x3', ' ', '\x3', ' ', '\x5', ' ', '\x17C', '\n', ' ', '\x3', ' ', '\x3',
        ' ', '\a', ' ', '\x180', '\n', ' ', '\f', ' ', '\xE', ' ', '\x183', '\v',
        ' ', '\x3', ' ', '\x3', ' ', '\x3', '!', '\x3', '!', '\x3', '!', '\x5',
        '!', '\x18A', '\n', '!', '\x3', '!', '\x3', '!', '\x5', '!', '\x18E',
        '\n', '!', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x5', '\"', '\x193',
        '\n', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3',
        '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"',
        '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x5',
        '\"', '\x1A4', '\n', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3',
        '\"', '\x3', '\"', '\x3', '\"', '\x5', '\"', '\x1AC', '\n', '\"', '\x3',
        '#', '\x5', '#', '\x1AF', '\n', '#', '\x3', '#', '\x3', '#', '\x3', '#',
        '\x5', '#', '\x1B4', '\n', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3',
        '#', '\x3', '#', '\x3', '$', '\x3', '$', '\x3', '$', '\a', '$', '\x1BE',
        '\n', '$', '\f', '$', '\xE', '$', '\x1C1', '\v', '$', '\x3', '$', '\x3',
        '$', '\x5', '$', '\x1C5', '\n', '$', '\x3', '$', '\x3', '$', '\x3', '$',
        '\x5', '$', '\x1CA', '\n', '$', '\x3', '%', '\x3', '%', '\x3', '%', '\x5',
        '%', '\x1CF', '\n', '%', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '\'',
        '\x5', '\'', '\x1D5', '\n', '\'', '\x3', '(', '\x6', '(', '\x1D8', '\n',
        '(', '\r', '(', '\xE', '(', '\x1D9', '\x3', ')', '\x3', ')', '\a', ')',
        '\x1DE', '\n', ')', '\f', ')', '\xE', ')', '\x1E1', '\v', ')', '\x3',
        ')', '\x5', ')', '\x1E4', '\n', ')', '\x3', ')', '\a', ')', '\x1E7', '\n',
        ')', '\f', ')', '\xE', ')', '\x1EA', '\v', ')', '\x3', ')', '\x3', ')',
        '\x3', '*', '\x3', '*', '\x6', '*', '\x1F0', '\n', '*', '\r', '*', '\xE',
        '*', '\x1F1', '\x3', '*', '\a', '*', '\x1F5', '\n', '*', '\f', '*', '\xE',
        '*', '\x1F8', '\v', '*', '\x3', '*', '\x6', '*', '\x1FB', '\n', '*', '\r',
        '*', '\xE', '*', '\x1FC', '\x3', '*', '\x5', '*', '\x200', '\n', '*',
        '\x3', '*', '\x5', '*', '\x203', '\n', '*', '\x3', '+', '\x3', '+', '\x3',
        '+', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\a', ',', '\x20C',
        '\n', ',', '\f', ',', '\xE', ',', '\x20F', '\v', ',', '\x5', ',', '\x211',
        '\n', ',', '\x3', ',', '\x5', ',', '\x214', '\n', ',', '\x3', ',', '\x3',
        ',', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3',
        '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3',
        '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3',
        '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3',
        '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x5', '-', '\x233', '\n', '-',
        '\x3', '.', '\x3', '.', '\x3', '.', '\x5', '.', '\x238', '\n', '.', '\x3',
        '/', '\x3', '/', '\x3', '/', '\x3', '/', '\a', '/', '\x23E', '\n', '/',
        '\f', '/', '\xE', '/', '\x241', '\v', '/', '\x3', '/', '\x3', '/', '\x5',
        '/', '\x245', '\n', '/', '\x3', '/', '\x5', '/', '\x248', '\n', '/', '\x3',
        '/', '\x3', '/', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x31',
        '\x3', '\x31', '\x3', '\x31', '\a', '\x31', '\x252', '\n', '\x31', '\f',
        '\x31', '\xE', '\x31', '\x255', '\v', '\x31', '\x3', '\x32', '\x3', '\x32',
        '\x3', '\x32', '\x5', '\x32', '\x25A', '\n', '\x32', '\x3', '\x32', '\x3',
        '\x32', '\x5', '\x32', '\x25E', '\n', '\x32', '\x3', '\x32', '\x3', '\x32',
        '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32',
        '\x5', '\x32', '\x267', '\n', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3',
        '\x32', '\x3', '\x32', '\x5', '\x32', '\x26D', '\n', '\x32', '\x3', '\x32',
        '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32',
        '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32',
        '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32',
        '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32',
        '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32',
        '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32',
        '\x3', '\x32', '\x5', '\x32', '\x28F', '\n', '\x32', '\x3', '\x32', '\x3',
        '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3',
        '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3',
        '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3',
        '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3',
        '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3',
        '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3',
        '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3',
        '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3',
        '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3',
        '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3',
        '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3',
        '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3',
        '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3',
        '\x32', '\a', '\x32', '\x2D4', '\n', '\x32', '\f', '\x32', '\xE', '\x32',
        '\x2D7', '\v', '\x32', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x5',
        '\x33', '\x2DC', '\n', '\x33', '\x3', '\x33', '\x5', '\x33', '\x2DF',
        '\n', '\x33', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34',
        '\x3', '\x34', '\x5', '\x34', '\x2E6', '\n', '\x34', '\x3', '\x35', '\x3',
        '\x35', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3',
        '\x36', '\x3', '\x36', '\x5', '\x36', '\x2F0', '\n', '\x36', '\x3', '\x37',
        '\x3', '\x37', '\x3', '\x38', '\x3', '\x38', '\x5', '\x38', '\x2F6', '\n',
        '\x38', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x5', '\x39', '\x2FB',
        '\n', '\x39', '\x3', ':', '\x3', ':', '\x3', ';', '\x3', ';', '\x3', ';',
        '\x3', ';', '\x3', '<', '\x3', '<', '\x3', '<', '\x3', '<', '\x3', '=',
        '\x3', '=', '\x3', '=', '\x3', '=', '\x5', '=', '\x30B', '\n', '=', '\x3',
        '=', '\x2', '\x3', '\x62', '>', '\x2', '\x4', '\x6', '\b', '\n', '\f',
        '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E',
        ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36',
        '\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N',
        'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', '\x66',
        'h', 'j', 'l', 'n', 'p', 'r', 't', 'v', 'x', '\x2', '\f', '\x5', '\x2',
        '\x46', '\x46', ']', ']', '\x61', '\x61', '\x4', '\x2', '\xE', '\xE',
        '\x10', '\x10', '\x3', '\x2', '\x19', '\x1B', '\x3', '\x2', '\x15', '\x16',
        '\x3', '\x2', '\x1C', '\x1E', '\x3', '\x2', '\x1F', '\"', '\x3', '\x2',
        '#', '&', '\x3', '\x2', ',', '\x36', '\x3', '\x2', ':', '>', '\x3', '\x2',
        '?', 'h', '\x2', '\x366', '\x2', '{', '\x3', '\x2', '\x2', '\x2', '\x4',
        '\x80', '\x3', '\x2', '\x2', '\x2', '\x6', '\x95', '\x3', '\x2', '\x2',
        '\x2', '\b', '\x97', '\x3', '\x2', '\x2', '\x2', '\n', '\x9E', '\x3',
        '\x2', '\x2', '\x2', '\f', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xE',
        '\xA6', '\x3', '\x2', '\x2', '\x2', '\x10', '\xB1', '\x3', '\x2', '\x2',
        '\x2', '\x12', '\xB7', '\x3', '\x2', '\x2', '\x2', '\x14', '\xB9', '\x3',
        '\x2', '\x2', '\x2', '\x16', '\xBD', '\x3', '\x2', '\x2', '\x2', '\x18',
        '\x10B', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x10D', '\x3', '\x2', '\x2',
        '\x2', '\x1C', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x116', '\x3',
        '\x2', '\x2', '\x2', ' ', '\x11D', '\x3', '\x2', '\x2', '\x2', '\"', '\x124',
        '\x3', '\x2', '\x2', '\x2', '$', '\x12A', '\x3', '\x2', '\x2', '\x2',
        '&', '\x130', '\x3', '\x2', '\x2', '\x2', '(', '\x13D', '\x3', '\x2',
        '\x2', '\x2', '*', '\x141', '\x3', '\x2', '\x2', '\x2', ',', '\x147',
        '\x3', '\x2', '\x2', '\x2', '.', '\x14C', '\x3', '\x2', '\x2', '\x2',
        '\x30', '\x150', '\x3', '\x2', '\x2', '\x2', '\x32', '\x155', '\x3', '\x2',
        '\x2', '\x2', '\x34', '\x15E', '\x3', '\x2', '\x2', '\x2', '\x36', '\x164',
        '\x3', '\x2', '\x2', '\x2', '\x38', '\x167', '\x3', '\x2', '\x2', '\x2',
        ':', '\x16A', '\x3', '\x2', '\x2', '\x2', '<', '\x175', '\x3', '\x2',
        '\x2', '\x2', '>', '\x17B', '\x3', '\x2', '\x2', '\x2', '@', '\x18D',
        '\x3', '\x2', '\x2', '\x2', '\x42', '\x1AB', '\x3', '\x2', '\x2', '\x2',
        '\x44', '\x1AE', '\x3', '\x2', '\x2', '\x2', '\x46', '\x1C9', '\x3', '\x2',
        '\x2', '\x2', 'H', '\x1CB', '\x3', '\x2', '\x2', '\x2', 'J', '\x1D0',
        '\x3', '\x2', '\x2', '\x2', 'L', '\x1D4', '\x3', '\x2', '\x2', '\x2',
        'N', '\x1D7', '\x3', '\x2', '\x2', '\x2', 'P', '\x1DB', '\x3', '\x2',
        '\x2', '\x2', 'R', '\x202', '\x3', '\x2', '\x2', '\x2', 'T', '\x204',
        '\x3', '\x2', '\x2', '\x2', 'V', '\x207', '\x3', '\x2', '\x2', '\x2',
        'X', '\x232', '\x3', '\x2', '\x2', '\x2', 'Z', '\x237', '\x3', '\x2',
        '\x2', '\x2', '\\', '\x239', '\x3', '\x2', '\x2', '\x2', '^', '\x24B',
        '\x3', '\x2', '\x2', '\x2', '`', '\x24E', '\x3', '\x2', '\x2', '\x2',
        '\x62', '\x28E', '\x3', '\x2', '\x2', '\x2', '\x64', '\x2DE', '\x3', '\x2',
        '\x2', '\x2', '\x66', '\x2E5', '\x3', '\x2', '\x2', '\x2', 'h', '\x2E7',
        '\x3', '\x2', '\x2', '\x2', 'j', '\x2EF', '\x3', '\x2', '\x2', '\x2',
        'l', '\x2F1', '\x3', '\x2', '\x2', '\x2', 'n', '\x2F5', '\x3', '\x2',
        '\x2', '\x2', 'p', '\x2FA', '\x3', '\x2', '\x2', '\x2', 'r', '\x2FC',
        '\x3', '\x2', '\x2', '\x2', 't', '\x2FE', '\x3', '\x2', '\x2', '\x2',
        'v', '\x302', '\x3', '\x2', '\x2', '\x2', 'x', '\x30A', '\x3', '\x2',
        '\x2', '\x2', 'z', '|', '\x5', 'N', '(', '\x2', '{', 'z', '\x3', '\x2',
        '\x2', '\x2', '{', '|', '\x3', '\x2', '\x2', '\x2', '|', '}', '\x3', '\x2',
        '\x2', '\x2', '}', '~', '\a', '\x2', '\x2', '\x3', '~', '\x3', '\x3',
        '\x2', '\x2', '\x2', '\x7F', '\x81', '\a', '^', '\x2', '\x2', '\x80',
        '\x7F', '\x3', '\x2', '\x2', '\x2', '\x80', '\x81', '\x3', '\x2', '\x2',
        '\x2', '\x81', '\x82', '\x3', '\x2', '\x2', '\x2', '\x82', '\x83', '\x5',
        '\x6', '\x4', '\x2', '\x83', '\x5', '\x3', '\x2', '\x2', '\x2', '\x84',
        '\x96', '\x5', '\b', '\x5', '\x2', '\x85', '\x96', '\x5', '\f', '\a',
        '\x2', '\x86', '\x96', '\x5', '\x12', '\n', '\x2', '\x87', '\x96', '\x5',
        '\x14', '\v', '\x2', '\x88', '\x96', '\x5', '\x16', '\f', '\x2', '\x89',
        '\x96', '\x5', '\x18', '\r', '\x2', '\x8A', '\x96', '\x5', '\x1C', '\xF',
        '\x2', '\x8B', '\x96', '\x5', '\x1E', '\x10', '\x2', '\x8C', '\x96', '\x5',
        ' ', '\x11', '\x2', '\x8D', '\x96', '\x5', '\"', '\x12', '\x2', '\x8E',
        '\x96', '\x5', '.', '\x18', '\x2', '\x8F', '\x96', '\x5', '$', '\x13',
        '\x2', '\x90', '\x96', '\x5', '\x30', '\x19', '\x2', '\x91', '\x96', '\x5',
        '\x32', '\x1A', '\x2', '\x92', '\x96', '\x5', '\x38', '\x1D', '\x2', '\x93',
        '\x96', '\x5', ':', '\x1E', '\x2', '\x94', '\x96', '\x5', '<', '\x1F',
        '\x2', '\x95', '\x84', '\x3', '\x2', '\x2', '\x2', '\x95', '\x85', '\x3',
        '\x2', '\x2', '\x2', '\x95', '\x86', '\x3', '\x2', '\x2', '\x2', '\x95',
        '\x87', '\x3', '\x2', '\x2', '\x2', '\x95', '\x88', '\x3', '\x2', '\x2',
        '\x2', '\x95', '\x89', '\x3', '\x2', '\x2', '\x2', '\x95', '\x8A', '\x3',
        '\x2', '\x2', '\x2', '\x95', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x95',
        '\x8C', '\x3', '\x2', '\x2', '\x2', '\x95', '\x8D', '\x3', '\x2', '\x2',
        '\x2', '\x95', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x95', '\x8F', '\x3',
        '\x2', '\x2', '\x2', '\x95', '\x90', '\x3', '\x2', '\x2', '\x2', '\x95',
        '\x91', '\x3', '\x2', '\x2', '\x2', '\x95', '\x92', '\x3', '\x2', '\x2',
        '\x2', '\x95', '\x93', '\x3', '\x2', '\x2', '\x2', '\x95', '\x94', '\x3',
        '\x2', '\x2', '\x2', '\x96', '\a', '\x3', '\x2', '\x2', '\x2', '\x97',
        '\x99', '\a', '\n', '\x2', '\x2', '\x98', '\x9A', '\x5', '\n', '\x6',
        '\x2', '\x99', '\x98', '\x3', '\x2', '\x2', '\x2', '\x99', '\x9A', '\x3',
        '\x2', '\x2', '\x2', '\x9A', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x9B',
        '\x9C', '\a', '\v', '\x2', '\x2', '\x9C', '\t', '\x3', '\x2', '\x2', '\x2',
        '\x9D', '\x9F', '\x5', '\x6', '\x4', '\x2', '\x9E', '\x9D', '\x3', '\x2',
        '\x2', '\x2', '\x9F', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x9E',
        '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA1', '\x3', '\x2', '\x2', '\x2',
        '\xA1', '\v', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA3', '\x5', '\x1A',
        '\xE', '\x2', '\xA3', '\xA4', '\x5', '\xE', '\b', '\x2', '\xA4', '\xA5',
        '\x5', 'x', '=', '\x2', '\xA5', '\r', '\x3', '\x2', '\x2', '\x2', '\xA6',
        '\xAB', '\x5', '\x10', '\t', '\x2', '\xA7', '\xA8', '\a', '\r', '\x2',
        '\x2', '\xA8', '\xAA', '\x5', '\x10', '\t', '\x2', '\xA9', '\xA7', '\x3',
        '\x2', '\x2', '\x2', '\xAA', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xAB',
        '\xA9', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xAC', '\x3', '\x2', '\x2',
        '\x2', '\xAC', '\xF', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAB', '\x3',
        '\x2', '\x2', '\x2', '\xAE', '\xB2', '\a', 'i', '\x2', '\x2', '\xAF',
        '\xB2', '\x5', 'P', ')', '\x2', '\xB0', '\xB2', '\x5', 'V', ',', '\x2',
        '\xB1', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xAF', '\x3', '\x2',
        '\x2', '\x2', '\xB1', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB5',
        '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB4', '\a', '\xE', '\x2', '\x2',
        '\xB4', '\xB6', '\x5', '\x62', '\x32', '\x2', '\xB5', '\xB3', '\x3', '\x2',
        '\x2', '\x2', '\xB5', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xB6', '\x11',
        '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB8', '\a', '\f', '\x2', '\x2',
        '\xB8', '\x13', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xBA', '\x6', '\v',
        '\x2', '\x2', '\xBA', '\xBB', '\x5', '`', '\x31', '\x2', '\xBB', '\xBC',
        '\x5', 'x', '=', '\x2', '\xBC', '\x15', '\x3', '\x2', '\x2', '\x2', '\xBD',
        '\xBE', '\a', 'T', '\x2', '\x2', '\xBE', '\xBF', '\a', '\b', '\x2', '\x2',
        '\xBF', '\xC0', '\x5', '`', '\x31', '\x2', '\xC0', '\xC1', '\a', '\t',
        '\x2', '\x2', '\xC1', '\xC4', '\x5', '\x6', '\x4', '\x2', '\xC2', '\xC3',
        '\a', '\x44', '\x2', '\x2', '\xC3', '\xC5', '\x5', '\x6', '\x4', '\x2',
        '\xC4', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC5', '\x3', '\x2',
        '\x2', '\x2', '\xC5', '\x17', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC7',
        '\a', '@', '\x2', '\x2', '\xC7', '\xC8', '\x5', '\x6', '\x4', '\x2', '\xC8',
        '\xC9', '\a', 'N', '\x2', '\x2', '\xC9', '\xCA', '\a', '\b', '\x2', '\x2',
        '\xCA', '\xCB', '\x5', '`', '\x31', '\x2', '\xCB', '\xCC', '\a', '\t',
        '\x2', '\x2', '\xCC', '\xCD', '\x5', 'x', '=', '\x2', '\xCD', '\x10C',
        '\x3', '\x2', '\x2', '\x2', '\xCE', '\xCF', '\a', 'N', '\x2', '\x2', '\xCF',
        '\xD0', '\a', '\b', '\x2', '\x2', '\xD0', '\xD1', '\x5', '`', '\x31',
        '\x2', '\xD1', '\xD2', '\a', '\t', '\x2', '\x2', '\xD2', '\xD3', '\x5',
        '\x6', '\x4', '\x2', '\xD3', '\x10C', '\x3', '\x2', '\x2', '\x2', '\xD4',
        '\xD5', '\a', 'L', '\x2', '\x2', '\xD5', '\xD7', '\a', '\b', '\x2', '\x2',
        '\xD6', '\xD8', '\x5', '`', '\x31', '\x2', '\xD7', '\xD6', '\x3', '\x2',
        '\x2', '\x2', '\xD7', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xD9',
        '\x3', '\x2', '\x2', '\x2', '\xD9', '\xDB', '\a', '\f', '\x2', '\x2',
        '\xDA', '\xDC', '\x5', '`', '\x31', '\x2', '\xDB', '\xDA', '\x3', '\x2',
        '\x2', '\x2', '\xDB', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDD',
        '\x3', '\x2', '\x2', '\x2', '\xDD', '\xDF', '\a', '\f', '\x2', '\x2',
        '\xDE', '\xE0', '\x5', '`', '\x31', '\x2', '\xDF', '\xDE', '\x3', '\x2',
        '\x2', '\x2', '\xDF', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xE1',
        '\x3', '\x2', '\x2', '\x2', '\xE1', '\xE2', '\a', '\t', '\x2', '\x2',
        '\xE2', '\x10C', '\x5', '\x6', '\x4', '\x2', '\xE3', '\xE4', '\a', 'L',
        '\x2', '\x2', '\xE4', '\xE5', '\a', '\b', '\x2', '\x2', '\xE5', '\xE6',
        '\x5', '\x1A', '\xE', '\x2', '\xE6', '\xE7', '\x5', '\xE', '\b', '\x2',
        '\xE7', '\xE9', '\a', '\f', '\x2', '\x2', '\xE8', '\xEA', '\x5', '`',
        '\x31', '\x2', '\xE9', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xEA',
        '\x3', '\x2', '\x2', '\x2', '\xEA', '\xEB', '\x3', '\x2', '\x2', '\x2',
        '\xEB', '\xED', '\a', '\f', '\x2', '\x2', '\xEC', '\xEE', '\x5', '`',
        '\x31', '\x2', '\xED', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xED', '\xEE',
        '\x3', '\x2', '\x2', '\x2', '\xEE', '\xEF', '\x3', '\x2', '\x2', '\x2',
        '\xEF', '\xF0', '\a', '\t', '\x2', '\x2', '\xF0', '\xF1', '\x5', '\x6',
        '\x4', '\x2', '\xF1', '\x10C', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xF3',
        '\a', 'L', '\x2', '\x2', '\xF3', '\xF4', '\a', '\b', '\x2', '\x2', '\xF4',
        '\xF8', '\x5', '\x62', '\x32', '\x2', '\xF5', '\xF9', '\a', 'W', '\x2',
        '\x2', '\xF6', '\xF7', '\a', 'i', '\x2', '\x2', '\xF7', '\xF9', '\x6',
        '\r', '\x3', '\x2', '\xF8', '\xF5', '\x3', '\x2', '\x2', '\x2', '\xF8',
        '\xF6', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xFA', '\x3', '\x2', '\x2',
        '\x2', '\xFA', '\xFB', '\x5', '`', '\x31', '\x2', '\xFB', '\xFC', '\a',
        '\t', '\x2', '\x2', '\xFC', '\xFD', '\x5', '\x6', '\x4', '\x2', '\xFD',
        '\x10C', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xFF', '\a', 'L', '\x2',
        '\x2', '\xFF', '\x100', '\a', '\b', '\x2', '\x2', '\x100', '\x101', '\x5',
        '\x1A', '\xE', '\x2', '\x101', '\x105', '\x5', '\x10', '\t', '\x2', '\x102',
        '\x106', '\a', 'W', '\x2', '\x2', '\x103', '\x104', '\a', 'i', '\x2',
        '\x2', '\x104', '\x106', '\x6', '\r', '\x4', '\x2', '\x105', '\x102',
        '\x3', '\x2', '\x2', '\x2', '\x105', '\x103', '\x3', '\x2', '\x2', '\x2',
        '\x106', '\x107', '\x3', '\x2', '\x2', '\x2', '\x107', '\x108', '\x5',
        '`', '\x31', '\x2', '\x108', '\x109', '\a', '\t', '\x2', '\x2', '\x109',
        '\x10A', '\x5', '\x6', '\x4', '\x2', '\x10A', '\x10C', '\x3', '\x2', '\x2',
        '\x2', '\x10B', '\xC6', '\x3', '\x2', '\x2', '\x2', '\x10B', '\xCE', '\x3',
        '\x2', '\x2', '\x2', '\x10B', '\xD4', '\x3', '\x2', '\x2', '\x2', '\x10B',
        '\xE3', '\x3', '\x2', '\x2', '\x2', '\x10B', '\xF2', '\x3', '\x2', '\x2',
        '\x2', '\x10B', '\xFE', '\x3', '\x2', '\x2', '\x2', '\x10C', '\x19', '\x3',
        '\x2', '\x2', '\x2', '\x10D', '\x10E', '\t', '\x2', '\x2', '\x2', '\x10E',
        '\x1B', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x112', '\a', 'K', '\x2',
        '\x2', '\x110', '\x111', '\x6', '\xF', '\x5', '\x2', '\x111', '\x113',
        '\a', 'i', '\x2', '\x2', '\x112', '\x110', '\x3', '\x2', '\x2', '\x2',
        '\x112', '\x113', '\x3', '\x2', '\x2', '\x2', '\x113', '\x114', '\x3',
        '\x2', '\x2', '\x2', '\x114', '\x115', '\x5', 'x', '=', '\x2', '\x115',
        '\x1D', '\x3', '\x2', '\x2', '\x2', '\x116', '\x119', '\a', '?', '\x2',
        '\x2', '\x117', '\x118', '\x6', '\x10', '\x6', '\x2', '\x118', '\x11A',
        '\a', 'i', '\x2', '\x2', '\x119', '\x117', '\x3', '\x2', '\x2', '\x2',
        '\x119', '\x11A', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x11B', '\x3',
        '\x2', '\x2', '\x2', '\x11B', '\x11C', '\x5', 'x', '=', '\x2', '\x11C',
        '\x1F', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x120', '\a', 'I', '\x2',
        '\x2', '\x11E', '\x11F', '\x6', '\x11', '\a', '\x2', '\x11F', '\x121',
        '\x5', '`', '\x31', '\x2', '\x120', '\x11E', '\x3', '\x2', '\x2', '\x2',
        '\x120', '\x121', '\x3', '\x2', '\x2', '\x2', '\x121', '\x122', '\x3',
        '\x2', '\x2', '\x2', '\x122', '\x123', '\x5', 'x', '=', '\x2', '\x123',
        '!', '\x3', '\x2', '\x2', '\x2', '\x124', '\x125', '\a', 'R', '\x2', '\x2',
        '\x125', '\x126', '\a', '\b', '\x2', '\x2', '\x126', '\x127', '\x5', '`',
        '\x31', '\x2', '\x127', '\x128', '\a', '\t', '\x2', '\x2', '\x128', '\x129',
        '\x5', '\x6', '\x4', '\x2', '\x129', '#', '\x3', '\x2', '\x2', '\x2',
        '\x12A', '\x12B', '\a', 'M', '\x2', '\x2', '\x12B', '\x12C', '\a', '\b',
        '\x2', '\x2', '\x12C', '\x12D', '\x5', '`', '\x31', '\x2', '\x12D', '\x12E',
        '\a', '\t', '\x2', '\x2', '\x12E', '\x12F', '\x5', '&', '\x14', '\x2',
        '\x12F', '%', '\x3', '\x2', '\x2', '\x2', '\x130', '\x132', '\a', '\n',
        '\x2', '\x2', '\x131', '\x133', '\x5', '(', '\x15', '\x2', '\x132', '\x131',
        '\x3', '\x2', '\x2', '\x2', '\x132', '\x133', '\x3', '\x2', '\x2', '\x2',
        '\x133', '\x138', '\x3', '\x2', '\x2', '\x2', '\x134', '\x136', '\x5',
        ',', '\x17', '\x2', '\x135', '\x137', '\x5', '(', '\x15', '\x2', '\x136',
        '\x135', '\x3', '\x2', '\x2', '\x2', '\x136', '\x137', '\x3', '\x2', '\x2',
        '\x2', '\x137', '\x139', '\x3', '\x2', '\x2', '\x2', '\x138', '\x134',
        '\x3', '\x2', '\x2', '\x2', '\x138', '\x139', '\x3', '\x2', '\x2', '\x2',
        '\x139', '\x13A', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x13B', '\a',
        '\v', '\x2', '\x2', '\x13B', '\'', '\x3', '\x2', '\x2', '\x2', '\x13C',
        '\x13E', '\x5', '*', '\x16', '\x2', '\x13D', '\x13C', '\x3', '\x2', '\x2',
        '\x2', '\x13E', '\x13F', '\x3', '\x2', '\x2', '\x2', '\x13F', '\x13D',
        '\x3', '\x2', '\x2', '\x2', '\x13F', '\x140', '\x3', '\x2', '\x2', '\x2',
        '\x140', ')', '\x3', '\x2', '\x2', '\x2', '\x141', '\x142', '\a', '\x43',
        '\x2', '\x2', '\x142', '\x143', '\x5', '`', '\x31', '\x2', '\x143', '\x145',
        '\a', '\x10', '\x2', '\x2', '\x144', '\x146', '\x5', '\n', '\x6', '\x2',
        '\x145', '\x144', '\x3', '\x2', '\x2', '\x2', '\x145', '\x146', '\x3',
        '\x2', '\x2', '\x2', '\x146', '+', '\x3', '\x2', '\x2', '\x2', '\x147',
        '\x148', '\a', 'S', '\x2', '\x2', '\x148', '\x14A', '\a', '\x10', '\x2',
        '\x2', '\x149', '\x14B', '\x5', '\n', '\x6', '\x2', '\x14A', '\x149',
        '\x3', '\x2', '\x2', '\x2', '\x14A', '\x14B', '\x3', '\x2', '\x2', '\x2',
        '\x14B', '-', '\x3', '\x2', '\x2', '\x2', '\x14C', '\x14D', '\a', 'i',
        '\x2', '\x2', '\x14D', '\x14E', '\a', '\x10', '\x2', '\x2', '\x14E', '\x14F',
        '\x5', '\x6', '\x4', '\x2', '\x14F', '/', '\x3', '\x2', '\x2', '\x2',
        '\x150', '\x151', '\a', 'U', '\x2', '\x2', '\x151', '\x152', '\x6', '\x19',
        '\b', '\x2', '\x152', '\x153', '\x5', '`', '\x31', '\x2', '\x153', '\x154',
        '\x5', 'x', '=', '\x2', '\x154', '\x31', '\x3', '\x2', '\x2', '\x2', '\x155',
        '\x156', '\a', 'X', '\x2', '\x2', '\x156', '\x15C', '\x5', '\b', '\x5',
        '\x2', '\x157', '\x159', '\x5', '\x34', '\x1B', '\x2', '\x158', '\x15A',
        '\x5', '\x36', '\x1C', '\x2', '\x159', '\x158', '\x3', '\x2', '\x2', '\x2',
        '\x159', '\x15A', '\x3', '\x2', '\x2', '\x2', '\x15A', '\x15D', '\x3',
        '\x2', '\x2', '\x2', '\x15B', '\x15D', '\x5', '\x36', '\x1C', '\x2', '\x15C',
        '\x157', '\x3', '\x2', '\x2', '\x2', '\x15C', '\x15B', '\x3', '\x2', '\x2',
        '\x2', '\x15D', '\x33', '\x3', '\x2', '\x2', '\x2', '\x15E', '\x15F',
        '\a', 'G', '\x2', '\x2', '\x15F', '\x160', '\a', '\b', '\x2', '\x2', '\x160',
        '\x161', '\a', 'i', '\x2', '\x2', '\x161', '\x162', '\a', '\t', '\x2',
        '\x2', '\x162', '\x163', '\x5', '\b', '\x5', '\x2', '\x163', '\x35', '\x3',
        '\x2', '\x2', '\x2', '\x164', '\x165', '\a', 'H', '\x2', '\x2', '\x165',
        '\x166', '\x5', '\b', '\x5', '\x2', '\x166', '\x37', '\x3', '\x2', '\x2',
        '\x2', '\x167', '\x168', '\a', 'O', '\x2', '\x2', '\x168', '\x169', '\x5',
        'x', '=', '\x2', '\x169', '\x39', '\x3', '\x2', '\x2', '\x2', '\x16A',
        '\x16B', '\a', 'P', '\x2', '\x2', '\x16B', '\x16C', '\a', 'i', '\x2',
        '\x2', '\x16C', '\x16E', '\a', '\b', '\x2', '\x2', '\x16D', '\x16F', '\x5',
        '\x46', '$', '\x2', '\x16E', '\x16D', '\x3', '\x2', '\x2', '\x2', '\x16E',
        '\x16F', '\x3', '\x2', '\x2', '\x2', '\x16F', '\x170', '\x3', '\x2', '\x2',
        '\x2', '\x170', '\x171', '\a', '\t', '\x2', '\x2', '\x171', '\x172', '\a',
        '\n', '\x2', '\x2', '\x172', '\x173', '\x5', 'L', '\'', '\x2', '\x173',
        '\x174', '\a', '\v', '\x2', '\x2', '\x174', ';', '\x3', '\x2', '\x2',
        '\x2', '\x175', '\x176', '\a', 'Y', '\x2', '\x2', '\x176', '\x177', '\a',
        'i', '\x2', '\x2', '\x177', '\x178', '\x5', '>', ' ', '\x2', '\x178',
        '=', '\x3', '\x2', '\x2', '\x2', '\x179', '\x17A', '\a', '[', '\x2', '\x2',
        '\x17A', '\x17C', '\x5', '\x62', '\x32', '\x2', '\x17B', '\x179', '\x3',
        '\x2', '\x2', '\x2', '\x17B', '\x17C', '\x3', '\x2', '\x2', '\x2', '\x17C',
        '\x17D', '\x3', '\x2', '\x2', '\x2', '\x17D', '\x181', '\a', '\n', '\x2',
        '\x2', '\x17E', '\x180', '\x5', '@', '!', '\x2', '\x17F', '\x17E', '\x3',
        '\x2', '\x2', '\x2', '\x180', '\x183', '\x3', '\x2', '\x2', '\x2', '\x181',
        '\x17F', '\x3', '\x2', '\x2', '\x2', '\x181', '\x182', '\x3', '\x2', '\x2',
        '\x2', '\x182', '\x184', '\x3', '\x2', '\x2', '\x2', '\x183', '\x181',
        '\x3', '\x2', '\x2', '\x2', '\x184', '\x185', '\a', '\v', '\x2', '\x2',
        '\x185', '?', '\x3', '\x2', '\x2', '\x2', '\x186', '\x18A', '\a', 'g',
        '\x2', '\x2', '\x187', '\x188', '\x6', '!', '\t', '\x2', '\x188', '\x18A',
        '\a', 'i', '\x2', '\x2', '\x189', '\x186', '\x3', '\x2', '\x2', '\x2',
        '\x189', '\x187', '\x3', '\x2', '\x2', '\x2', '\x189', '\x18A', '\x3',
        '\x2', '\x2', '\x2', '\x18A', '\x18B', '\x3', '\x2', '\x2', '\x2', '\x18B',
        '\x18E', '\x5', '\x42', '\"', '\x2', '\x18C', '\x18E', '\x5', '\x12',
        '\n', '\x2', '\x18D', '\x189', '\x3', '\x2', '\x2', '\x2', '\x18D', '\x18C',
        '\x3', '\x2', '\x2', '\x2', '\x18E', '\x41', '\x3', '\x2', '\x2', '\x2',
        '\x18F', '\x190', '\x5', 'Z', '.', '\x2', '\x190', '\x192', '\a', '\b',
        '\x2', '\x2', '\x191', '\x193', '\x5', '\x46', '$', '\x2', '\x192', '\x191',
        '\x3', '\x2', '\x2', '\x2', '\x192', '\x193', '\x3', '\x2', '\x2', '\x2',
        '\x193', '\x194', '\x3', '\x2', '\x2', '\x2', '\x194', '\x195', '\a',
        '\t', '\x2', '\x2', '\x195', '\x196', '\a', '\n', '\x2', '\x2', '\x196',
        '\x197', '\x5', 'L', '\'', '\x2', '\x197', '\x198', '\a', '\v', '\x2',
        '\x2', '\x198', '\x1AC', '\x3', '\x2', '\x2', '\x2', '\x199', '\x19A',
        '\x5', 't', ';', '\x2', '\x19A', '\x19B', '\a', '\b', '\x2', '\x2', '\x19B',
        '\x19C', '\a', '\t', '\x2', '\x2', '\x19C', '\x19D', '\a', '\n', '\x2',
        '\x2', '\x19D', '\x19E', '\x5', 'L', '\'', '\x2', '\x19E', '\x19F', '\a',
        '\v', '\x2', '\x2', '\x19F', '\x1AC', '\x3', '\x2', '\x2', '\x2', '\x1A0',
        '\x1A1', '\x5', 'v', '<', '\x2', '\x1A1', '\x1A3', '\a', '\b', '\x2',
        '\x2', '\x1A2', '\x1A4', '\x5', '\x46', '$', '\x2', '\x1A3', '\x1A2',
        '\x3', '\x2', '\x2', '\x2', '\x1A3', '\x1A4', '\x3', '\x2', '\x2', '\x2',
        '\x1A4', '\x1A5', '\x3', '\x2', '\x2', '\x2', '\x1A5', '\x1A6', '\a',
        '\t', '\x2', '\x2', '\x1A6', '\x1A7', '\a', '\n', '\x2', '\x2', '\x1A7',
        '\x1A8', '\x5', 'L', '\'', '\x2', '\x1A8', '\x1A9', '\a', '\v', '\x2',
        '\x2', '\x1A9', '\x1AC', '\x3', '\x2', '\x2', '\x2', '\x1AA', '\x1AC',
        '\x5', '\x44', '#', '\x2', '\x1AB', '\x18F', '\x3', '\x2', '\x2', '\x2',
        '\x1AB', '\x199', '\x3', '\x2', '\x2', '\x2', '\x1AB', '\x1A0', '\x3',
        '\x2', '\x2', '\x2', '\x1AB', '\x1AA', '\x3', '\x2', '\x2', '\x2', '\x1AC',
        '\x43', '\x3', '\x2', '\x2', '\x2', '\x1AD', '\x1AF', '\a', '\x19', '\x2',
        '\x2', '\x1AE', '\x1AD', '\x3', '\x2', '\x2', '\x2', '\x1AE', '\x1AF',
        '\x3', '\x2', '\x2', '\x2', '\x1AF', '\x1B0', '\x3', '\x2', '\x2', '\x2',
        '\x1B0', '\x1B1', '\a', 'i', '\x2', '\x2', '\x1B1', '\x1B3', '\a', '\b',
        '\x2', '\x2', '\x1B2', '\x1B4', '\x5', '\x46', '$', '\x2', '\x1B3', '\x1B2',
        '\x3', '\x2', '\x2', '\x2', '\x1B3', '\x1B4', '\x3', '\x2', '\x2', '\x2',
        '\x1B4', '\x1B5', '\x3', '\x2', '\x2', '\x2', '\x1B5', '\x1B6', '\a',
        '\t', '\x2', '\x2', '\x1B6', '\x1B7', '\a', '\n', '\x2', '\x2', '\x1B7',
        '\x1B8', '\x5', 'L', '\'', '\x2', '\x1B8', '\x1B9', '\a', '\v', '\x2',
        '\x2', '\x1B9', '\x45', '\x3', '\x2', '\x2', '\x2', '\x1BA', '\x1BF',
        '\x5', 'H', '%', '\x2', '\x1BB', '\x1BC', '\a', '\r', '\x2', '\x2', '\x1BC',
        '\x1BE', '\x5', 'H', '%', '\x2', '\x1BD', '\x1BB', '\x3', '\x2', '\x2',
        '\x2', '\x1BE', '\x1C1', '\x3', '\x2', '\x2', '\x2', '\x1BF', '\x1BD',
        '\x3', '\x2', '\x2', '\x2', '\x1BF', '\x1C0', '\x3', '\x2', '\x2', '\x2',
        '\x1C0', '\x1C4', '\x3', '\x2', '\x2', '\x2', '\x1C1', '\x1BF', '\x3',
        '\x2', '\x2', '\x2', '\x1C2', '\x1C3', '\a', '\r', '\x2', '\x2', '\x1C3',
        '\x1C5', '\x5', 'J', '&', '\x2', '\x1C4', '\x1C2', '\x3', '\x2', '\x2',
        '\x2', '\x1C4', '\x1C5', '\x3', '\x2', '\x2', '\x2', '\x1C5', '\x1CA',
        '\x3', '\x2', '\x2', '\x2', '\x1C6', '\x1CA', '\x5', 'J', '&', '\x2',
        '\x1C7', '\x1CA', '\x5', 'P', ')', '\x2', '\x1C8', '\x1CA', '\x5', 'V',
        ',', '\x2', '\x1C9', '\x1BA', '\x3', '\x2', '\x2', '\x2', '\x1C9', '\x1C6',
        '\x3', '\x2', '\x2', '\x2', '\x1C9', '\x1C7', '\x3', '\x2', '\x2', '\x2',
        '\x1C9', '\x1C8', '\x3', '\x2', '\x2', '\x2', '\x1CA', 'G', '\x3', '\x2',
        '\x2', '\x2', '\x1CB', '\x1CE', '\a', 'i', '\x2', '\x2', '\x1CC', '\x1CD',
        '\a', '\xE', '\x2', '\x2', '\x1CD', '\x1CF', '\x5', '\x62', '\x32', '\x2',
        '\x1CE', '\x1CC', '\x3', '\x2', '\x2', '\x2', '\x1CE', '\x1CF', '\x3',
        '\x2', '\x2', '\x2', '\x1CF', 'I', '\x3', '\x2', '\x2', '\x2', '\x1D0',
        '\x1D1', '\a', '\x11', '\x2', '\x2', '\x1D1', '\x1D2', '\a', 'i', '\x2',
        '\x2', '\x1D2', 'K', '\x3', '\x2', '\x2', '\x2', '\x1D3', '\x1D5', '\x5',
        'N', '(', '\x2', '\x1D4', '\x1D3', '\x3', '\x2', '\x2', '\x2', '\x1D4',
        '\x1D5', '\x3', '\x2', '\x2', '\x2', '\x1D5', 'M', '\x3', '\x2', '\x2',
        '\x2', '\x1D6', '\x1D8', '\x5', '\x4', '\x3', '\x2', '\x1D7', '\x1D6',
        '\x3', '\x2', '\x2', '\x2', '\x1D8', '\x1D9', '\x3', '\x2', '\x2', '\x2',
        '\x1D9', '\x1D7', '\x3', '\x2', '\x2', '\x2', '\x1D9', '\x1DA', '\x3',
        '\x2', '\x2', '\x2', '\x1DA', 'O', '\x3', '\x2', '\x2', '\x2', '\x1DB',
        '\x1DF', '\a', '\x6', '\x2', '\x2', '\x1DC', '\x1DE', '\a', '\r', '\x2',
        '\x2', '\x1DD', '\x1DC', '\x3', '\x2', '\x2', '\x2', '\x1DE', '\x1E1',
        '\x3', '\x2', '\x2', '\x2', '\x1DF', '\x1DD', '\x3', '\x2', '\x2', '\x2',
        '\x1DF', '\x1E0', '\x3', '\x2', '\x2', '\x2', '\x1E0', '\x1E3', '\x3',
        '\x2', '\x2', '\x2', '\x1E1', '\x1DF', '\x3', '\x2', '\x2', '\x2', '\x1E2',
        '\x1E4', '\x5', 'R', '*', '\x2', '\x1E3', '\x1E2', '\x3', '\x2', '\x2',
        '\x2', '\x1E3', '\x1E4', '\x3', '\x2', '\x2', '\x2', '\x1E4', '\x1E8',
        '\x3', '\x2', '\x2', '\x2', '\x1E5', '\x1E7', '\a', '\r', '\x2', '\x2',
        '\x1E6', '\x1E5', '\x3', '\x2', '\x2', '\x2', '\x1E7', '\x1EA', '\x3',
        '\x2', '\x2', '\x2', '\x1E8', '\x1E6', '\x3', '\x2', '\x2', '\x2', '\x1E8',
        '\x1E9', '\x3', '\x2', '\x2', '\x2', '\x1E9', '\x1EB', '\x3', '\x2', '\x2',
        '\x2', '\x1EA', '\x1E8', '\x3', '\x2', '\x2', '\x2', '\x1EB', '\x1EC',
        '\a', '\a', '\x2', '\x2', '\x1EC', 'Q', '\x3', '\x2', '\x2', '\x2', '\x1ED',
        '\x1F6', '\x5', '\x62', '\x32', '\x2', '\x1EE', '\x1F0', '\a', '\r', '\x2',
        '\x2', '\x1EF', '\x1EE', '\x3', '\x2', '\x2', '\x2', '\x1F0', '\x1F1',
        '\x3', '\x2', '\x2', '\x2', '\x1F1', '\x1EF', '\x3', '\x2', '\x2', '\x2',
        '\x1F1', '\x1F2', '\x3', '\x2', '\x2', '\x2', '\x1F2', '\x1F3', '\x3',
        '\x2', '\x2', '\x2', '\x1F3', '\x1F5', '\x5', '\x62', '\x32', '\x2', '\x1F4',
        '\x1EF', '\x3', '\x2', '\x2', '\x2', '\x1F5', '\x1F8', '\x3', '\x2', '\x2',
        '\x2', '\x1F6', '\x1F4', '\x3', '\x2', '\x2', '\x2', '\x1F6', '\x1F7',
        '\x3', '\x2', '\x2', '\x2', '\x1F7', '\x1FF', '\x3', '\x2', '\x2', '\x2',
        '\x1F8', '\x1F6', '\x3', '\x2', '\x2', '\x2', '\x1F9', '\x1FB', '\a',
        '\r', '\x2', '\x2', '\x1FA', '\x1F9', '\x3', '\x2', '\x2', '\x2', '\x1FB',
        '\x1FC', '\x3', '\x2', '\x2', '\x2', '\x1FC', '\x1FA', '\x3', '\x2', '\x2',
        '\x2', '\x1FC', '\x1FD', '\x3', '\x2', '\x2', '\x2', '\x1FD', '\x1FE',
        '\x3', '\x2', '\x2', '\x2', '\x1FE', '\x200', '\x5', 'T', '+', '\x2',
        '\x1FF', '\x1FA', '\x3', '\x2', '\x2', '\x2', '\x1FF', '\x200', '\x3',
        '\x2', '\x2', '\x2', '\x200', '\x203', '\x3', '\x2', '\x2', '\x2', '\x201',
        '\x203', '\x5', 'T', '+', '\x2', '\x202', '\x1ED', '\x3', '\x2', '\x2',
        '\x2', '\x202', '\x201', '\x3', '\x2', '\x2', '\x2', '\x203', 'S', '\x3',
        '\x2', '\x2', '\x2', '\x204', '\x205', '\a', '\x11', '\x2', '\x2', '\x205',
        '\x206', '\a', 'i', '\x2', '\x2', '\x206', 'U', '\x3', '\x2', '\x2', '\x2',
        '\x207', '\x210', '\a', '\n', '\x2', '\x2', '\x208', '\x20D', '\x5', 'X',
        '-', '\x2', '\x209', '\x20A', '\a', '\r', '\x2', '\x2', '\x20A', '\x20C',
        '\x5', 'X', '-', '\x2', '\x20B', '\x209', '\x3', '\x2', '\x2', '\x2',
        '\x20C', '\x20F', '\x3', '\x2', '\x2', '\x2', '\x20D', '\x20B', '\x3',
        '\x2', '\x2', '\x2', '\x20D', '\x20E', '\x3', '\x2', '\x2', '\x2', '\x20E',
        '\x211', '\x3', '\x2', '\x2', '\x2', '\x20F', '\x20D', '\x3', '\x2', '\x2',
        '\x2', '\x210', '\x208', '\x3', '\x2', '\x2', '\x2', '\x210', '\x211',
        '\x3', '\x2', '\x2', '\x2', '\x211', '\x213', '\x3', '\x2', '\x2', '\x2',
        '\x212', '\x214', '\a', '\r', '\x2', '\x2', '\x213', '\x212', '\x3', '\x2',
        '\x2', '\x2', '\x213', '\x214', '\x3', '\x2', '\x2', '\x2', '\x214', '\x215',
        '\x3', '\x2', '\x2', '\x2', '\x215', '\x216', '\a', '\v', '\x2', '\x2',
        '\x216', 'W', '\x3', '\x2', '\x2', '\x2', '\x217', '\x218', '\x5', 'Z',
        '.', '\x2', '\x218', '\x219', '\t', '\x3', '\x2', '\x2', '\x219', '\x21A',
        '\x5', '\x62', '\x32', '\x2', '\x21A', '\x233', '\x3', '\x2', '\x2', '\x2',
        '\x21B', '\x21C', '\a', '\x6', '\x2', '\x2', '\x21C', '\x21D', '\x5',
        '\x62', '\x32', '\x2', '\x21D', '\x21E', '\a', '\a', '\x2', '\x2', '\x21E',
        '\x21F', '\a', '\x10', '\x2', '\x2', '\x21F', '\x220', '\x5', '\x62',
        '\x32', '\x2', '\x220', '\x233', '\x3', '\x2', '\x2', '\x2', '\x221',
        '\x222', '\x5', 't', ';', '\x2', '\x222', '\x223', '\a', '\b', '\x2',
        '\x2', '\x223', '\x224', '\a', '\t', '\x2', '\x2', '\x224', '\x225', '\a',
        '\n', '\x2', '\x2', '\x225', '\x226', '\x5', 'L', '\'', '\x2', '\x226',
        '\x227', '\a', '\v', '\x2', '\x2', '\x227', '\x233', '\x3', '\x2', '\x2',
        '\x2', '\x228', '\x229', '\x5', 'v', '<', '\x2', '\x229', '\x22A', '\a',
        '\b', '\x2', '\x2', '\x22A', '\x22B', '\a', 'i', '\x2', '\x2', '\x22B',
        '\x22C', '\a', '\t', '\x2', '\x2', '\x22C', '\x22D', '\a', '\n', '\x2',
        '\x2', '\x22D', '\x22E', '\x5', 'L', '\'', '\x2', '\x22E', '\x22F', '\a',
        '\v', '\x2', '\x2', '\x22F', '\x233', '\x3', '\x2', '\x2', '\x2', '\x230',
        '\x233', '\x5', '\x44', '#', '\x2', '\x231', '\x233', '\a', 'i', '\x2',
        '\x2', '\x232', '\x217', '\x3', '\x2', '\x2', '\x2', '\x232', '\x21B',
        '\x3', '\x2', '\x2', '\x2', '\x232', '\x221', '\x3', '\x2', '\x2', '\x2',
        '\x232', '\x228', '\x3', '\x2', '\x2', '\x2', '\x232', '\x230', '\x3',
        '\x2', '\x2', '\x2', '\x232', '\x231', '\x3', '\x2', '\x2', '\x2', '\x233',
        'Y', '\x3', '\x2', '\x2', '\x2', '\x234', '\x238', '\x5', 'n', '\x38',
        '\x2', '\x235', '\x238', '\a', 'j', '\x2', '\x2', '\x236', '\x238', '\x5',
        'l', '\x37', '\x2', '\x237', '\x234', '\x3', '\x2', '\x2', '\x2', '\x237',
        '\x235', '\x3', '\x2', '\x2', '\x2', '\x237', '\x236', '\x3', '\x2', '\x2',
        '\x2', '\x238', '[', '\x3', '\x2', '\x2', '\x2', '\x239', '\x247', '\a',
        '\b', '\x2', '\x2', '\x23A', '\x23F', '\x5', '\x62', '\x32', '\x2', '\x23B',
        '\x23C', '\a', '\r', '\x2', '\x2', '\x23C', '\x23E', '\x5', '\x62', '\x32',
        '\x2', '\x23D', '\x23B', '\x3', '\x2', '\x2', '\x2', '\x23E', '\x241',
        '\x3', '\x2', '\x2', '\x2', '\x23F', '\x23D', '\x3', '\x2', '\x2', '\x2',
        '\x23F', '\x240', '\x3', '\x2', '\x2', '\x2', '\x240', '\x244', '\x3',
        '\x2', '\x2', '\x2', '\x241', '\x23F', '\x3', '\x2', '\x2', '\x2', '\x242',
        '\x243', '\a', '\r', '\x2', '\x2', '\x243', '\x245', '\x5', '^', '\x30',
        '\x2', '\x244', '\x242', '\x3', '\x2', '\x2', '\x2', '\x244', '\x245',
        '\x3', '\x2', '\x2', '\x2', '\x245', '\x248', '\x3', '\x2', '\x2', '\x2',
        '\x246', '\x248', '\x5', '^', '\x30', '\x2', '\x247', '\x23A', '\x3',
        '\x2', '\x2', '\x2', '\x247', '\x246', '\x3', '\x2', '\x2', '\x2', '\x247',
        '\x248', '\x3', '\x2', '\x2', '\x2', '\x248', '\x249', '\x3', '\x2', '\x2',
        '\x2', '\x249', '\x24A', '\a', '\t', '\x2', '\x2', '\x24A', ']', '\x3',
        '\x2', '\x2', '\x2', '\x24B', '\x24C', '\a', '\x11', '\x2', '\x2', '\x24C',
        '\x24D', '\a', 'i', '\x2', '\x2', '\x24D', '_', '\x3', '\x2', '\x2', '\x2',
        '\x24E', '\x253', '\x5', '\x62', '\x32', '\x2', '\x24F', '\x250', '\a',
        '\r', '\x2', '\x2', '\x250', '\x252', '\x5', '\x62', '\x32', '\x2', '\x251',
        '\x24F', '\x3', '\x2', '\x2', '\x2', '\x252', '\x255', '\x3', '\x2', '\x2',
        '\x2', '\x253', '\x251', '\x3', '\x2', '\x2', '\x2', '\x253', '\x254',
        '\x3', '\x2', '\x2', '\x2', '\x254', '\x61', '\x3', '\x2', '\x2', '\x2',
        '\x255', '\x253', '\x3', '\x2', '\x2', '\x2', '\x256', '\x257', '\b',
        '\x32', '\x1', '\x2', '\x257', '\x259', '\a', 'P', '\x2', '\x2', '\x258',
        '\x25A', '\a', 'i', '\x2', '\x2', '\x259', '\x258', '\x3', '\x2', '\x2',
        '\x2', '\x259', '\x25A', '\x3', '\x2', '\x2', '\x2', '\x25A', '\x25B',
        '\x3', '\x2', '\x2', '\x2', '\x25B', '\x25D', '\a', '\b', '\x2', '\x2',
        '\x25C', '\x25E', '\x5', '\x46', '$', '\x2', '\x25D', '\x25C', '\x3',
        '\x2', '\x2', '\x2', '\x25D', '\x25E', '\x3', '\x2', '\x2', '\x2', '\x25E',
        '\x25F', '\x3', '\x2', '\x2', '\x2', '\x25F', '\x260', '\a', '\t', '\x2',
        '\x2', '\x260', '\x261', '\a', '\n', '\x2', '\x2', '\x261', '\x262', '\x5',
        'L', '\'', '\x2', '\x262', '\x263', '\a', '\v', '\x2', '\x2', '\x263',
        '\x28F', '\x3', '\x2', '\x2', '\x2', '\x264', '\x266', '\a', 'Y', '\x2',
        '\x2', '\x265', '\x267', '\a', 'i', '\x2', '\x2', '\x266', '\x265', '\x3',
        '\x2', '\x2', '\x2', '\x266', '\x267', '\x3', '\x2', '\x2', '\x2', '\x267',
        '\x268', '\x3', '\x2', '\x2', '\x2', '\x268', '\x28F', '\x5', '>', ' ',
        '\x2', '\x269', '\x26A', '\a', '\x45', '\x2', '\x2', '\x26A', '\x26C',
        '\x5', '\x62', '\x32', '\x2', '\x26B', '\x26D', '\x5', '\\', '/', '\x2',
        '\x26C', '\x26B', '\x3', '\x2', '\x2', '\x2', '\x26C', '\x26D', '\x3',
        '\x2', '\x2', '\x2', '\x26D', '\x28F', '\x3', '\x2', '\x2', '\x2', '\x26E',
        '\x26F', '\a', 'V', '\x2', '\x2', '\x26F', '\x28F', '\x5', '\x62', '\x32',
        '#', '\x270', '\x271', '\a', 'J', '\x2', '\x2', '\x271', '\x28F', '\x5',
        '\x62', '\x32', '\"', '\x272', '\x273', '\a', '\x42', '\x2', '\x2', '\x273',
        '\x28F', '\x5', '\x62', '\x32', '!', '\x274', '\x275', '\a', '\x13', '\x2',
        '\x2', '\x275', '\x28F', '\x5', '\x62', '\x32', ' ', '\x276', '\x277',
        '\a', '\x14', '\x2', '\x2', '\x277', '\x28F', '\x5', '\x62', '\x32', '\x1F',
        '\x278', '\x279', '\a', '\x15', '\x2', '\x2', '\x279', '\x28F', '\x5',
        '\x62', '\x32', '\x1E', '\x27A', '\x27B', '\a', '\x16', '\x2', '\x2',
        '\x27B', '\x28F', '\x5', '\x62', '\x32', '\x1D', '\x27C', '\x27D', '\a',
        '\x17', '\x2', '\x2', '\x27D', '\x28F', '\x5', '\x62', '\x32', '\x1C',
        '\x27E', '\x27F', '\a', '\x18', '\x2', '\x2', '\x27F', '\x28F', '\x5',
        '\x62', '\x32', '\x1B', '\x280', '\x28F', '\a', 'Q', '\x2', '\x2', '\x281',
        '\x28F', '\a', 'i', '\x2', '\x2', '\x282', '\x28F', '\a', '\\', '\x2',
        '\x2', '\x283', '\x28F', '\x5', 'j', '\x36', '\x2', '\x284', '\x28F',
        '\x5', 'P', ')', '\x2', '\x285', '\x28F', '\x5', 'V', ',', '\x2', '\x286',
        '\x287', '\a', '\b', '\x2', '\x2', '\x287', '\x288', '\x5', '`', '\x31',
        '\x2', '\x288', '\x289', '\a', '\t', '\x2', '\x2', '\x289', '\x28F', '\x3',
        '\x2', '\x2', '\x2', '\x28A', '\x28B', '\x5', '\x64', '\x33', '\x2', '\x28B',
        '\x28C', '\a', '\x37', '\x2', '\x2', '\x28C', '\x28D', '\x5', '\x66',
        '\x34', '\x2', '\x28D', '\x28F', '\x3', '\x2', '\x2', '\x2', '\x28E',
        '\x256', '\x3', '\x2', '\x2', '\x2', '\x28E', '\x264', '\x3', '\x2', '\x2',
        '\x2', '\x28E', '\x269', '\x3', '\x2', '\x2', '\x2', '\x28E', '\x26E',
        '\x3', '\x2', '\x2', '\x2', '\x28E', '\x270', '\x3', '\x2', '\x2', '\x2',
        '\x28E', '\x272', '\x3', '\x2', '\x2', '\x2', '\x28E', '\x274', '\x3',
        '\x2', '\x2', '\x2', '\x28E', '\x276', '\x3', '\x2', '\x2', '\x2', '\x28E',
        '\x278', '\x3', '\x2', '\x2', '\x2', '\x28E', '\x27A', '\x3', '\x2', '\x2',
        '\x2', '\x28E', '\x27C', '\x3', '\x2', '\x2', '\x2', '\x28E', '\x27E',
        '\x3', '\x2', '\x2', '\x2', '\x28E', '\x280', '\x3', '\x2', '\x2', '\x2',
        '\x28E', '\x281', '\x3', '\x2', '\x2', '\x2', '\x28E', '\x282', '\x3',
        '\x2', '\x2', '\x2', '\x28E', '\x283', '\x3', '\x2', '\x2', '\x2', '\x28E',
        '\x284', '\x3', '\x2', '\x2', '\x2', '\x28E', '\x285', '\x3', '\x2', '\x2',
        '\x2', '\x28E', '\x286', '\x3', '\x2', '\x2', '\x2', '\x28E', '\x28A',
        '\x3', '\x2', '\x2', '\x2', '\x28F', '\x2D5', '\x3', '\x2', '\x2', '\x2',
        '\x290', '\x291', '\f', '\x1A', '\x2', '\x2', '\x291', '\x292', '\t',
        '\x4', '\x2', '\x2', '\x292', '\x2D4', '\x5', '\x62', '\x32', '\x1B',
        '\x293', '\x294', '\f', '\x19', '\x2', '\x2', '\x294', '\x295', '\t',
        '\x5', '\x2', '\x2', '\x295', '\x2D4', '\x5', '\x62', '\x32', '\x1A',
        '\x296', '\x297', '\f', '\x18', '\x2', '\x2', '\x297', '\x298', '\t',
        '\x6', '\x2', '\x2', '\x298', '\x2D4', '\x5', '\x62', '\x32', '\x19',
        '\x299', '\x29A', '\f', '\x17', '\x2', '\x2', '\x29A', '\x29B', '\t',
        '\a', '\x2', '\x2', '\x29B', '\x2D4', '\x5', '\x62', '\x32', '\x18', '\x29C',
        '\x29D', '\f', '\x16', '\x2', '\x2', '\x29D', '\x29E', '\a', '\x41', '\x2',
        '\x2', '\x29E', '\x2D4', '\x5', '\x62', '\x32', '\x17', '\x29F', '\x2A0',
        '\f', '\x15', '\x2', '\x2', '\x2A0', '\x2A1', '\a', 'W', '\x2', '\x2',
        '\x2A1', '\x2D4', '\x5', '\x62', '\x32', '\x16', '\x2A2', '\x2A3', '\f',
        '\x14', '\x2', '\x2', '\x2A3', '\x2A4', '\t', '\b', '\x2', '\x2', '\x2A4',
        '\x2D4', '\x5', '\x62', '\x32', '\x15', '\x2A5', '\x2A6', '\f', '\x13',
        '\x2', '\x2', '\x2A6', '\x2A7', '\a', '\'', '\x2', '\x2', '\x2A7', '\x2D4',
        '\x5', '\x62', '\x32', '\x14', '\x2A8', '\x2A9', '\f', '\x12', '\x2',
        '\x2', '\x2A9', '\x2AA', '\a', '(', '\x2', '\x2', '\x2AA', '\x2D4', '\x5',
        '\x62', '\x32', '\x13', '\x2AB', '\x2AC', '\f', '\x11', '\x2', '\x2',
        '\x2AC', '\x2AD', '\a', ')', '\x2', '\x2', '\x2AD', '\x2D4', '\x5', '\x62',
        '\x32', '\x12', '\x2AE', '\x2AF', '\f', '\x10', '\x2', '\x2', '\x2AF',
        '\x2B0', '\a', '*', '\x2', '\x2', '\x2B0', '\x2D4', '\x5', '\x62', '\x32',
        '\x11', '\x2B1', '\x2B2', '\f', '\xF', '\x2', '\x2', '\x2B2', '\x2B3',
        '\a', '+', '\x2', '\x2', '\x2B3', '\x2D4', '\x5', '\x62', '\x32', '\x10',
        '\x2B4', '\x2B5', '\f', '\xE', '\x2', '\x2', '\x2B5', '\x2B6', '\a', '\xF',
        '\x2', '\x2', '\x2B6', '\x2B7', '\x5', '\x62', '\x32', '\x2', '\x2B7',
        '\x2B8', '\a', '\x10', '\x2', '\x2', '\x2B8', '\x2B9', '\x5', '\x62',
        '\x32', '\xF', '\x2B9', '\x2D4', '\x3', '\x2', '\x2', '\x2', '\x2BA',
        '\x2BB', '\f', '\r', '\x2', '\x2', '\x2BB', '\x2BC', '\a', '\xE', '\x2',
        '\x2', '\x2BC', '\x2D4', '\x5', '\x62', '\x32', '\xE', '\x2BD', '\x2BE',
        '\f', '\f', '\x2', '\x2', '\x2BE', '\x2BF', '\x5', 'h', '\x35', '\x2',
        '\x2BF', '\x2C0', '\x5', '\x62', '\x32', '\r', '\x2C0', '\x2D4', '\x3',
        '\x2', '\x2', '\x2', '\x2C1', '\x2C2', '\f', ')', '\x2', '\x2', '\x2C2',
        '\x2C3', '\a', '\x6', '\x2', '\x2', '\x2C3', '\x2C4', '\x5', '`', '\x31',
        '\x2', '\x2C4', '\x2C5', '\a', '\a', '\x2', '\x2', '\x2C5', '\x2D4', '\x3',
        '\x2', '\x2', '\x2', '\x2C6', '\x2C7', '\f', '(', '\x2', '\x2', '\x2C7',
        '\x2C8', '\a', '\x12', '\x2', '\x2', '\x2C8', '\x2D4', '\x5', 'n', '\x38',
        '\x2', '\x2C9', '\x2CA', '\f', '\'', '\x2', '\x2', '\x2CA', '\x2D4', '\x5',
        '\\', '/', '\x2', '\x2CB', '\x2CC', '\f', '%', '\x2', '\x2', '\x2CC',
        '\x2CD', '\x6', '\x32', '\x1D', '\x2', '\x2CD', '\x2D4', '\a', '\x13',
        '\x2', '\x2', '\x2CE', '\x2CF', '\f', '$', '\x2', '\x2', '\x2CF', '\x2D0',
        '\x6', '\x32', '\x1F', '\x2', '\x2D0', '\x2D4', '\a', '\x14', '\x2', '\x2',
        '\x2D1', '\x2D2', '\f', '\v', '\x2', '\x2', '\x2D2', '\x2D4', '\a', 'k',
        '\x2', '\x2', '\x2D3', '\x290', '\x3', '\x2', '\x2', '\x2', '\x2D3', '\x293',
        '\x3', '\x2', '\x2', '\x2', '\x2D3', '\x296', '\x3', '\x2', '\x2', '\x2',
        '\x2D3', '\x299', '\x3', '\x2', '\x2', '\x2', '\x2D3', '\x29C', '\x3',
        '\x2', '\x2', '\x2', '\x2D3', '\x29F', '\x3', '\x2', '\x2', '\x2', '\x2D3',
        '\x2A2', '\x3', '\x2', '\x2', '\x2', '\x2D3', '\x2A5', '\x3', '\x2', '\x2',
        '\x2', '\x2D3', '\x2A8', '\x3', '\x2', '\x2', '\x2', '\x2D3', '\x2AB',
        '\x3', '\x2', '\x2', '\x2', '\x2D3', '\x2AE', '\x3', '\x2', '\x2', '\x2',
        '\x2D3', '\x2B1', '\x3', '\x2', '\x2', '\x2', '\x2D3', '\x2B4', '\x3',
        '\x2', '\x2', '\x2', '\x2D3', '\x2BA', '\x3', '\x2', '\x2', '\x2', '\x2D3',
        '\x2BD', '\x3', '\x2', '\x2', '\x2', '\x2D3', '\x2C1', '\x3', '\x2', '\x2',
        '\x2', '\x2D3', '\x2C6', '\x3', '\x2', '\x2', '\x2', '\x2D3', '\x2C9',
        '\x3', '\x2', '\x2', '\x2', '\x2D3', '\x2CB', '\x3', '\x2', '\x2', '\x2',
        '\x2D3', '\x2CE', '\x3', '\x2', '\x2', '\x2', '\x2D3', '\x2D1', '\x3',
        '\x2', '\x2', '\x2', '\x2D4', '\x2D7', '\x3', '\x2', '\x2', '\x2', '\x2D5',
        '\x2D3', '\x3', '\x2', '\x2', '\x2', '\x2D5', '\x2D6', '\x3', '\x2', '\x2',
        '\x2', '\x2D6', '\x63', '\x3', '\x2', '\x2', '\x2', '\x2D7', '\x2D5',
        '\x3', '\x2', '\x2', '\x2', '\x2D8', '\x2DF', '\a', 'i', '\x2', '\x2',
        '\x2D9', '\x2DB', '\a', '\b', '\x2', '\x2', '\x2DA', '\x2DC', '\x5', '\x46',
        '$', '\x2', '\x2DB', '\x2DA', '\x3', '\x2', '\x2', '\x2', '\x2DB', '\x2DC',
        '\x3', '\x2', '\x2', '\x2', '\x2DC', '\x2DD', '\x3', '\x2', '\x2', '\x2',
        '\x2DD', '\x2DF', '\a', '\t', '\x2', '\x2', '\x2DE', '\x2D8', '\x3', '\x2',
        '\x2', '\x2', '\x2DE', '\x2D9', '\x3', '\x2', '\x2', '\x2', '\x2DF', '\x65',
        '\x3', '\x2', '\x2', '\x2', '\x2E0', '\x2E6', '\x5', '\x62', '\x32', '\x2',
        '\x2E1', '\x2E2', '\a', '\n', '\x2', '\x2', '\x2E2', '\x2E3', '\x5', 'L',
        '\'', '\x2', '\x2E3', '\x2E4', '\a', '\v', '\x2', '\x2', '\x2E4', '\x2E6',
        '\x3', '\x2', '\x2', '\x2', '\x2E5', '\x2E0', '\x3', '\x2', '\x2', '\x2',
        '\x2E5', '\x2E1', '\x3', '\x2', '\x2', '\x2', '\x2E6', 'g', '\x3', '\x2',
        '\x2', '\x2', '\x2E7', '\x2E8', '\t', '\t', '\x2', '\x2', '\x2E8', 'i',
        '\x3', '\x2', '\x2', '\x2', '\x2E9', '\x2F0', '\a', '\x38', '\x2', '\x2',
        '\x2EA', '\x2F0', '\a', '\x39', '\x2', '\x2', '\x2EB', '\x2F0', '\a',
        'j', '\x2', '\x2', '\x2EC', '\x2F0', '\a', 'k', '\x2', '\x2', '\x2ED',
        '\x2F0', '\a', '\x5', '\x2', '\x2', '\x2EE', '\x2F0', '\x5', 'l', '\x37',
        '\x2', '\x2EF', '\x2E9', '\x3', '\x2', '\x2', '\x2', '\x2EF', '\x2EA',
        '\x3', '\x2', '\x2', '\x2', '\x2EF', '\x2EB', '\x3', '\x2', '\x2', '\x2',
        '\x2EF', '\x2EC', '\x3', '\x2', '\x2', '\x2', '\x2EF', '\x2ED', '\x3',
        '\x2', '\x2', '\x2', '\x2EF', '\x2EE', '\x3', '\x2', '\x2', '\x2', '\x2F0',
        'k', '\x3', '\x2', '\x2', '\x2', '\x2F1', '\x2F2', '\t', '\n', '\x2',
        '\x2', '\x2F2', 'm', '\x3', '\x2', '\x2', '\x2', '\x2F3', '\x2F6', '\a',
        'i', '\x2', '\x2', '\x2F4', '\x2F6', '\x5', 'p', '\x39', '\x2', '\x2F5',
        '\x2F3', '\x3', '\x2', '\x2', '\x2', '\x2F5', '\x2F4', '\x3', '\x2', '\x2',
        '\x2', '\x2F6', 'o', '\x3', '\x2', '\x2', '\x2', '\x2F7', '\x2FB', '\x5',
        'r', ':', '\x2', '\x2F8', '\x2FB', '\a', '\x38', '\x2', '\x2', '\x2F9',
        '\x2FB', '\a', '\x39', '\x2', '\x2', '\x2FA', '\x2F7', '\x3', '\x2', '\x2',
        '\x2', '\x2FA', '\x2F8', '\x3', '\x2', '\x2', '\x2', '\x2FA', '\x2F9',
        '\x3', '\x2', '\x2', '\x2', '\x2FB', 'q', '\x3', '\x2', '\x2', '\x2',
        '\x2FC', '\x2FD', '\t', '\v', '\x2', '\x2', '\x2FD', 's', '\x3', '\x2',
        '\x2', '\x2', '\x2FE', '\x2FF', '\a', 'i', '\x2', '\x2', '\x2FF', '\x300',
        '\x6', ';', '!', '\x2', '\x300', '\x301', '\x5', 'Z', '.', '\x2', '\x301',
        'u', '\x3', '\x2', '\x2', '\x2', '\x302', '\x303', '\a', 'i', '\x2', '\x2',
        '\x303', '\x304', '\x6', '<', '\"', '\x2', '\x304', '\x305', '\x5', 'Z',
        '.', '\x2', '\x305', 'w', '\x3', '\x2', '\x2', '\x2', '\x306', '\x30B',
        '\a', '\f', '\x2', '\x2', '\x307', '\x30B', '\a', '\x2', '\x2', '\x3',
        '\x308', '\x30B', '\x6', '=', '#', '\x2', '\x309', '\x30B', '\x6', '=',
        '$', '\x2', '\x30A', '\x306', '\x3', '\x2', '\x2', '\x2', '\x30A', '\x307',
        '\x3', '\x2', '\x2', '\x2', '\x30A', '\x308', '\x3', '\x2', '\x2', '\x2',
        '\x30A', '\x309', '\x3', '\x2', '\x2', '\x2', '\x30B', 'y', '\x3', '\x2',
        '\x2', '\x2', 'M', '{', '\x80', '\x95', '\x99', '\xA0', '\xAB', '\xB1',
        '\xB5', '\xC4', '\xD7', '\xDB', '\xDF', '\xE9', '\xED', '\xF8', '\x105',
        '\x10B', '\x112', '\x119', '\x120', '\x132', '\x136', '\x138', '\x13F',
        '\x145', '\x14A', '\x159', '\x15C', '\x16E', '\x17B', '\x181', '\x189',
        '\x18D', '\x192', '\x1A3', '\x1AB', '\x1AE', '\x1B3', '\x1BF', '\x1C4',
        '\x1C9', '\x1CE', '\x1D4', '\x1D9', '\x1DF', '\x1E3', '\x1E8', '\x1F1',
        '\x1F6', '\x1FC', '\x1FF', '\x202', '\x20D', '\x210', '\x213', '\x232',
        '\x237', '\x23F', '\x244', '\x247', '\x253', '\x259', '\x25D', '\x266',
        '\x26C', '\x28E', '\x2D3', '\x2D5', '\x2DB', '\x2DE', '\x2E5', '\x2EF',
        '\x2F5', '\x2FA', '\x30A',
    };

        public static readonly ATN _ATN =
            new ATNDeserializer().Deserialize(_serializedATN);


    }
}