//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace SqlParserAntlr
{
    // Generated from C:/Projects/SqlParserAntlr/SqlParserAntlr/JsParser\JavaScriptParser.g4 by ANTLR 4.7

    // Unreachable code detected
#pragma warning disable 0162
    // The variable '...' is assigned but its value is never used
#pragma warning disable 0219
    // Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
    // Ambiguous reference in cref attribute
#pragma warning disable 419

    using Antlr4.Runtime.Misc;
    using Antlr4.Runtime.Tree;
    using IToken = Antlr4.Runtime.IToken;
    using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

    /// <summary>
    /// This class provides an empty implementation of <see cref="IJavaScriptParserVisitor{Result}"/>,
    /// which can be extended to create a visitor which only needs to handle a subset
    /// of the available methods.
    /// </summary>
    /// <typeparam name="Result">The return type of the visit operation.</typeparam>
    [System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
    [System.CLSCompliant(false)]
    public partial class JavaScriptParserBaseVisitor<Result> : AbstractParseTreeVisitor<Result>, IJavaScriptParserVisitor<Result>
    {
        /// <summary>
        /// Visit a parse tree produced by <see cref="JavaScriptParser.program"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitProgram([NotNull] JavaScriptParser.ProgramContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="JavaScriptParser.sourceElement"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitSourceElement([NotNull] JavaScriptParser.SourceElementContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="JavaScriptParser.statement"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitStatement([NotNull] JavaScriptParser.StatementContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="JavaScriptParser.block"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitBlock([NotNull] JavaScriptParser.BlockContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="JavaScriptParser.statementList"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitStatementList([NotNull] JavaScriptParser.StatementListContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="JavaScriptParser.variableStatement"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitVariableStatement([NotNull] JavaScriptParser.VariableStatementContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="JavaScriptParser.variableDeclarationList"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitVariableDeclarationList([NotNull] JavaScriptParser.VariableDeclarationListContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="JavaScriptParser.variableDeclaration"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitVariableDeclaration([NotNull] JavaScriptParser.VariableDeclarationContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="JavaScriptParser.emptyStatement"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitEmptyStatement([NotNull] JavaScriptParser.EmptyStatementContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="JavaScriptParser.expressionStatement"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitExpressionStatement([NotNull] JavaScriptParser.ExpressionStatementContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="JavaScriptParser.ifStatement"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitIfStatement([NotNull] JavaScriptParser.IfStatementContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by the <c>DoStatement</c>
        /// labeled alternative in <see cref="JavaScriptParser.iterationStatement"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitDoStatement([NotNull] JavaScriptParser.DoStatementContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by the <c>WhileStatement</c>
        /// labeled alternative in <see cref="JavaScriptParser.iterationStatement"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitWhileStatement([NotNull] JavaScriptParser.WhileStatementContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by the <c>ForStatement</c>
        /// labeled alternative in <see cref="JavaScriptParser.iterationStatement"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitForStatement([NotNull] JavaScriptParser.ForStatementContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by the <c>ForVarStatement</c>
        /// labeled alternative in <see cref="JavaScriptParser.iterationStatement"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitForVarStatement([NotNull] JavaScriptParser.ForVarStatementContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by the <c>ForInStatement</c>
        /// labeled alternative in <see cref="JavaScriptParser.iterationStatement"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitForInStatement([NotNull] JavaScriptParser.ForInStatementContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by the <c>ForVarInStatement</c>
        /// labeled alternative in <see cref="JavaScriptParser.iterationStatement"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitForVarInStatement([NotNull] JavaScriptParser.ForVarInStatementContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="JavaScriptParser.varModifier"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitVarModifier([NotNull] JavaScriptParser.VarModifierContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="JavaScriptParser.continueStatement"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitContinueStatement([NotNull] JavaScriptParser.ContinueStatementContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="JavaScriptParser.breakStatement"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitBreakStatement([NotNull] JavaScriptParser.BreakStatementContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="JavaScriptParser.returnStatement"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitReturnStatement([NotNull] JavaScriptParser.ReturnStatementContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="JavaScriptParser.withStatement"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitWithStatement([NotNull] JavaScriptParser.WithStatementContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="JavaScriptParser.switchStatement"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitSwitchStatement([NotNull] JavaScriptParser.SwitchStatementContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="JavaScriptParser.caseBlock"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitCaseBlock([NotNull] JavaScriptParser.CaseBlockContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="JavaScriptParser.caseClauses"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitCaseClauses([NotNull] JavaScriptParser.CaseClausesContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="JavaScriptParser.caseClause"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitCaseClause([NotNull] JavaScriptParser.CaseClauseContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="JavaScriptParser.defaultClause"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitDefaultClause([NotNull] JavaScriptParser.DefaultClauseContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="JavaScriptParser.labelledStatement"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitLabelledStatement([NotNull] JavaScriptParser.LabelledStatementContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="JavaScriptParser.throwStatement"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitThrowStatement([NotNull] JavaScriptParser.ThrowStatementContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="JavaScriptParser.tryStatement"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitTryStatement([NotNull] JavaScriptParser.TryStatementContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="JavaScriptParser.catchProduction"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitCatchProduction([NotNull] JavaScriptParser.CatchProductionContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="JavaScriptParser.finallyProduction"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitFinallyProduction([NotNull] JavaScriptParser.FinallyProductionContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="JavaScriptParser.debuggerStatement"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitDebuggerStatement([NotNull] JavaScriptParser.DebuggerStatementContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="JavaScriptParser.functionDeclaration"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitFunctionDeclaration([NotNull] JavaScriptParser.FunctionDeclarationContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="JavaScriptParser.classDeclaration"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitClassDeclaration([NotNull] JavaScriptParser.ClassDeclarationContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="JavaScriptParser.classTail"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitClassTail([NotNull] JavaScriptParser.ClassTailContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="JavaScriptParser.classElement"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitClassElement([NotNull] JavaScriptParser.ClassElementContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="JavaScriptParser.methodDefinition"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitMethodDefinition([NotNull] JavaScriptParser.MethodDefinitionContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="JavaScriptParser.generatorMethod"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitGeneratorMethod([NotNull] JavaScriptParser.GeneratorMethodContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="JavaScriptParser.formalParameterList"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitFormalParameterList([NotNull] JavaScriptParser.FormalParameterListContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="JavaScriptParser.formalParameterArg"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitFormalParameterArg([NotNull] JavaScriptParser.FormalParameterArgContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="JavaScriptParser.lastFormalParameterArg"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitLastFormalParameterArg([NotNull] JavaScriptParser.LastFormalParameterArgContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="JavaScriptParser.functionBody"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitFunctionBody([NotNull] JavaScriptParser.FunctionBodyContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="JavaScriptParser.sourceElements"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitSourceElements([NotNull] JavaScriptParser.SourceElementsContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="JavaScriptParser.arrayLiteral"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitArrayLiteral([NotNull] JavaScriptParser.ArrayLiteralContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="JavaScriptParser.elementList"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitElementList([NotNull] JavaScriptParser.ElementListContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="JavaScriptParser.lastElement"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitLastElement([NotNull] JavaScriptParser.LastElementContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="JavaScriptParser.objectLiteral"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitObjectLiteral([NotNull] JavaScriptParser.ObjectLiteralContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by the <c>PropertyExpressionAssignment</c>
        /// labeled alternative in <see cref="JavaScriptParser.propertyAssignment"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitPropertyExpressionAssignment([NotNull] JavaScriptParser.PropertyExpressionAssignmentContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by the <c>ComputedPropertyExpressionAssignment</c>
        /// labeled alternative in <see cref="JavaScriptParser.propertyAssignment"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitComputedPropertyExpressionAssignment([NotNull] JavaScriptParser.ComputedPropertyExpressionAssignmentContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by the <c>PropertyGetter</c>
        /// labeled alternative in <see cref="JavaScriptParser.propertyAssignment"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitPropertyGetter([NotNull] JavaScriptParser.PropertyGetterContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by the <c>PropertySetter</c>
        /// labeled alternative in <see cref="JavaScriptParser.propertyAssignment"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitPropertySetter([NotNull] JavaScriptParser.PropertySetterContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by the <c>MethodProperty</c>
        /// labeled alternative in <see cref="JavaScriptParser.propertyAssignment"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitMethodProperty([NotNull] JavaScriptParser.MethodPropertyContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by the <c>PropertyShorthand</c>
        /// labeled alternative in <see cref="JavaScriptParser.propertyAssignment"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitPropertyShorthand([NotNull] JavaScriptParser.PropertyShorthandContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="JavaScriptParser.propertyName"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitPropertyName([NotNull] JavaScriptParser.PropertyNameContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="JavaScriptParser.arguments"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitArguments([NotNull] JavaScriptParser.ArgumentsContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="JavaScriptParser.lastArgument"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitLastArgument([NotNull] JavaScriptParser.LastArgumentContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="JavaScriptParser.expressionSequence"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitExpressionSequence([NotNull] JavaScriptParser.ExpressionSequenceContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by the <c>TemplateStringExpression</c>
        /// labeled alternative in <see cref="JavaScriptParser.singleExpression"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitTemplateStringExpression([NotNull] JavaScriptParser.TemplateStringExpressionContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by the <c>TernaryExpression</c>
        /// labeled alternative in <see cref="JavaScriptParser.singleExpression"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitTernaryExpression([NotNull] JavaScriptParser.TernaryExpressionContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by the <c>LogicalAndExpression</c>
        /// labeled alternative in <see cref="JavaScriptParser.singleExpression"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitLogicalAndExpression([NotNull] JavaScriptParser.LogicalAndExpressionContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by the <c>PreIncrementExpression</c>
        /// labeled alternative in <see cref="JavaScriptParser.singleExpression"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitPreIncrementExpression([NotNull] JavaScriptParser.PreIncrementExpressionContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by the <c>ObjectLiteralExpression</c>
        /// labeled alternative in <see cref="JavaScriptParser.singleExpression"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitObjectLiteralExpression([NotNull] JavaScriptParser.ObjectLiteralExpressionContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by the <c>InExpression</c>
        /// labeled alternative in <see cref="JavaScriptParser.singleExpression"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitInExpression([NotNull] JavaScriptParser.InExpressionContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by the <c>LogicalOrExpression</c>
        /// labeled alternative in <see cref="JavaScriptParser.singleExpression"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitLogicalOrExpression([NotNull] JavaScriptParser.LogicalOrExpressionContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by the <c>NotExpression</c>
        /// labeled alternative in <see cref="JavaScriptParser.singleExpression"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitNotExpression([NotNull] JavaScriptParser.NotExpressionContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by the <c>PreDecreaseExpression</c>
        /// labeled alternative in <see cref="JavaScriptParser.singleExpression"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitPreDecreaseExpression([NotNull] JavaScriptParser.PreDecreaseExpressionContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by the <c>ArgumentsExpression</c>
        /// labeled alternative in <see cref="JavaScriptParser.singleExpression"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitArgumentsExpression([NotNull] JavaScriptParser.ArgumentsExpressionContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by the <c>ThisExpression</c>
        /// labeled alternative in <see cref="JavaScriptParser.singleExpression"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitThisExpression([NotNull] JavaScriptParser.ThisExpressionContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by the <c>FunctionExpression</c>
        /// labeled alternative in <see cref="JavaScriptParser.singleExpression"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitFunctionExpression([NotNull] JavaScriptParser.FunctionExpressionContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by the <c>UnaryMinusExpression</c>
        /// labeled alternative in <see cref="JavaScriptParser.singleExpression"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitUnaryMinusExpression([NotNull] JavaScriptParser.UnaryMinusExpressionContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by the <c>AssignmentExpression</c>
        /// labeled alternative in <see cref="JavaScriptParser.singleExpression"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitAssignmentExpression([NotNull] JavaScriptParser.AssignmentExpressionContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by the <c>PostDecreaseExpression</c>
        /// labeled alternative in <see cref="JavaScriptParser.singleExpression"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitPostDecreaseExpression([NotNull] JavaScriptParser.PostDecreaseExpressionContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by the <c>TypeofExpression</c>
        /// labeled alternative in <see cref="JavaScriptParser.singleExpression"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitTypeofExpression([NotNull] JavaScriptParser.TypeofExpressionContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by the <c>InstanceofExpression</c>
        /// labeled alternative in <see cref="JavaScriptParser.singleExpression"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitInstanceofExpression([NotNull] JavaScriptParser.InstanceofExpressionContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by the <c>UnaryPlusExpression</c>
        /// labeled alternative in <see cref="JavaScriptParser.singleExpression"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitUnaryPlusExpression([NotNull] JavaScriptParser.UnaryPlusExpressionContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by the <c>DeleteExpression</c>
        /// labeled alternative in <see cref="JavaScriptParser.singleExpression"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitDeleteExpression([NotNull] JavaScriptParser.DeleteExpressionContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by the <c>ArrowFunctionExpression</c>
        /// labeled alternative in <see cref="JavaScriptParser.singleExpression"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitArrowFunctionExpression([NotNull] JavaScriptParser.ArrowFunctionExpressionContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by the <c>EqualityExpression</c>
        /// labeled alternative in <see cref="JavaScriptParser.singleExpression"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitEqualityExpression([NotNull] JavaScriptParser.EqualityExpressionContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by the <c>BitXOrExpression</c>
        /// labeled alternative in <see cref="JavaScriptParser.singleExpression"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitBitXOrExpression([NotNull] JavaScriptParser.BitXOrExpressionContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by the <c>SuperExpression</c>
        /// labeled alternative in <see cref="JavaScriptParser.singleExpression"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitSuperExpression([NotNull] JavaScriptParser.SuperExpressionContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by the <c>MultiplicativeExpression</c>
        /// labeled alternative in <see cref="JavaScriptParser.singleExpression"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitMultiplicativeExpression([NotNull] JavaScriptParser.MultiplicativeExpressionContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by the <c>BitShiftExpression</c>
        /// labeled alternative in <see cref="JavaScriptParser.singleExpression"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitBitShiftExpression([NotNull] JavaScriptParser.BitShiftExpressionContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by the <c>ParenthesizedExpression</c>
        /// labeled alternative in <see cref="JavaScriptParser.singleExpression"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitParenthesizedExpression([NotNull] JavaScriptParser.ParenthesizedExpressionContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by the <c>AdditiveExpression</c>
        /// labeled alternative in <see cref="JavaScriptParser.singleExpression"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitAdditiveExpression([NotNull] JavaScriptParser.AdditiveExpressionContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by the <c>RelationalExpression</c>
        /// labeled alternative in <see cref="JavaScriptParser.singleExpression"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitRelationalExpression([NotNull] JavaScriptParser.RelationalExpressionContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by the <c>PostIncrementExpression</c>
        /// labeled alternative in <see cref="JavaScriptParser.singleExpression"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitPostIncrementExpression([NotNull] JavaScriptParser.PostIncrementExpressionContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by the <c>BitNotExpression</c>
        /// labeled alternative in <see cref="JavaScriptParser.singleExpression"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitBitNotExpression([NotNull] JavaScriptParser.BitNotExpressionContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by the <c>NewExpression</c>
        /// labeled alternative in <see cref="JavaScriptParser.singleExpression"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitNewExpression([NotNull] JavaScriptParser.NewExpressionContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by the <c>LiteralExpression</c>
        /// labeled alternative in <see cref="JavaScriptParser.singleExpression"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitLiteralExpression([NotNull] JavaScriptParser.LiteralExpressionContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by the <c>ArrayLiteralExpression</c>
        /// labeled alternative in <see cref="JavaScriptParser.singleExpression"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitArrayLiteralExpression([NotNull] JavaScriptParser.ArrayLiteralExpressionContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by the <c>MemberDotExpression</c>
        /// labeled alternative in <see cref="JavaScriptParser.singleExpression"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitMemberDotExpression([NotNull] JavaScriptParser.MemberDotExpressionContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by the <c>ClassExpression</c>
        /// labeled alternative in <see cref="JavaScriptParser.singleExpression"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitClassExpression([NotNull] JavaScriptParser.ClassExpressionContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by the <c>MemberIndexExpression</c>
        /// labeled alternative in <see cref="JavaScriptParser.singleExpression"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitMemberIndexExpression([NotNull] JavaScriptParser.MemberIndexExpressionContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by the <c>IdentifierExpression</c>
        /// labeled alternative in <see cref="JavaScriptParser.singleExpression"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitIdentifierExpression([NotNull] JavaScriptParser.IdentifierExpressionContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by the <c>BitAndExpression</c>
        /// labeled alternative in <see cref="JavaScriptParser.singleExpression"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitBitAndExpression([NotNull] JavaScriptParser.BitAndExpressionContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by the <c>BitOrExpression</c>
        /// labeled alternative in <see cref="JavaScriptParser.singleExpression"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitBitOrExpression([NotNull] JavaScriptParser.BitOrExpressionContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by the <c>AssignmentOperatorExpression</c>
        /// labeled alternative in <see cref="JavaScriptParser.singleExpression"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitAssignmentOperatorExpression([NotNull] JavaScriptParser.AssignmentOperatorExpressionContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by the <c>VoidExpression</c>
        /// labeled alternative in <see cref="JavaScriptParser.singleExpression"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitVoidExpression([NotNull] JavaScriptParser.VoidExpressionContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="JavaScriptParser.arrowFunctionParameters"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitArrowFunctionParameters([NotNull] JavaScriptParser.ArrowFunctionParametersContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="JavaScriptParser.arrowFunctionBody"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitArrowFunctionBody([NotNull] JavaScriptParser.ArrowFunctionBodyContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="JavaScriptParser.assignmentOperator"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitAssignmentOperator([NotNull] JavaScriptParser.AssignmentOperatorContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="JavaScriptParser.literal"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitLiteral([NotNull] JavaScriptParser.LiteralContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="JavaScriptParser.numericLiteral"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitNumericLiteral([NotNull] JavaScriptParser.NumericLiteralContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="JavaScriptParser.identifierName"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitIdentifierName([NotNull] JavaScriptParser.IdentifierNameContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="JavaScriptParser.reservedWord"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitReservedWord([NotNull] JavaScriptParser.ReservedWordContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="JavaScriptParser.keyword"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitKeyword([NotNull] JavaScriptParser.KeywordContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="JavaScriptParser.getter"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitGetter([NotNull] JavaScriptParser.GetterContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="JavaScriptParser.setter"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitSetter([NotNull] JavaScriptParser.SetterContext context) { return VisitChildren(context); }
        /// <summary>
        /// Visit a parse tree produced by <see cref="JavaScriptParser.eos"/>.
        /// <para>
        /// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
        /// on <paramref name="context"/>.
        /// </para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        public virtual Result VisitEos([NotNull] JavaScriptParser.EosContext context) { return VisitChildren(context); }
    }
}